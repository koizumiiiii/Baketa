using System;
using Baketa.Core.Translation.Models;
using Microsoft.Extensions.Logging;

namespace Baketa.Infrastructure.Translation.Local.Onnx.Chinese;

/// <summary>
/// 中国語変種検出サービス
/// </summary>
public class ChineseVariantDetectionService
{
    private readonly ChineseLanguageProcessor _processor;
    private readonly ILogger<ChineseVariantDetectionService> _logger;

    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <param name="processor">中国語言語処理プロセッサ</param>
    /// <param name="logger">ロガー</param>
    /// <exception cref="ArgumentNullException">引数がnullの場合</exception>
    public ChineseVariantDetectionService(
        ChineseLanguageProcessor processor,
        ILogger<ChineseVariantDetectionService> logger)
    {
        _processor = processor ?? throw new ArgumentNullException(nameof(processor));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// テキストから中国語変種を検出
    /// </summary>
    /// <param name="text">検出対象のテキスト</param>
    /// <returns>検出された中国語変種</returns>
    public ChineseVariant DetectVariant(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            _logger.LogDebug("空のテキストが提供されました。Autoを返します。");
            return ChineseVariant.Auto;
        }

        var scriptType = _processor.DetectScriptType(text);
        var result = scriptType switch
        {
            ChineseScriptType.Simplified => ChineseVariant.Simplified,
            ChineseScriptType.Traditional => ChineseVariant.Traditional,
            ChineseScriptType.Mixed => ChineseVariant.Auto,
            ChineseScriptType.Unknown => ChineseVariant.Auto,
            _ => ChineseVariant.Auto
        };

        _logger.LogDebug("テキスト '{Text}' の変種検出結果: {ScriptType} -> {Variant}", 
            text.Length > 50 ? text[..50] + "..." : text, scriptType, result);

        return result;
    }

    /// <summary>
    /// 言語コードから中国語変種を検出
    /// </summary>
    /// <param name="languageCode">言語コード</param>
    /// <returns>検出された中国語変種</returns>
    public ChineseVariant DetectVariantFromLanguageCode(string languageCode)
    {
        if (string.IsNullOrWhiteSpace(languageCode))
        {
            return ChineseVariant.Auto;
        }

        var normalizedCode = languageCode.Trim().ToLowerInvariant();
        var result = normalizedCode switch
        {
            "zh-cn" or "zh-hans" or "zh-chs" or "cmn_hans" => ChineseVariant.Simplified,
            "zh-tw" or "zh-hk" or "zh-mo" or "zh-hant" or "zh-cht" or "cmn_hant" => ChineseVariant.Traditional,
            "yue" or "yue-hk" or "yue-cn" => ChineseVariant.Cantonese,
            "zh" or "zho" or "cmn" => ChineseVariant.Auto,
            _ => ChineseVariant.Auto
        };

        _logger.LogDebug("言語コード '{LanguageCode}' から変種検出: {Variant}", languageCode, result);
        return result;
    }

    /// <summary>
    /// 言語オブジェクトから中国語変種を検出
    /// </summary>
    /// <param name="language">言語オブジェクト</param>
    /// <returns>検出された中国語変種</returns>
    public ChineseVariant DetectVariantFromLanguage(Language language)
    {
        if (language == null)
        {
            return ChineseVariant.Auto;
        }

        // 地域コードがある場合はそれを含めて検出
        if (!string.IsNullOrWhiteSpace(language.RegionCode))
        {
            var fullCode = $"{language.Code}-{language.RegionCode}";
            var variantWithRegion = DetectVariantFromLanguageCode(fullCode);
            if (variantWithRegion != ChineseVariant.Auto)
            {
                return variantWithRegion;
            }
        }

        return DetectVariantFromLanguageCode(language.Code);
    }

    /// <summary>
    /// 指定された言語が中国語かどうかを判定
    /// </summary>
    /// <param name="languageCode">言語コード</param>
    /// <returns>中国語の場合はtrue</returns>
    public bool IsChineseLanguage(string languageCode)
    {
        return _processor.IsChineseLanguageCode(languageCode);
    }

    /// <summary>
    /// 言語オブジェクトが中国語かどうかを判定
    /// </summary>
    /// <param name="language">言語オブジェクト</param>
    /// <returns>中国語の場合はtrue</returns>
    public bool IsChineseLanguage(Language language)
    {
        if (language == null)
        {
            return false;
        }

        return IsChineseLanguage(language.Code) || 
               (!string.IsNullOrWhiteSpace(language.RegionCode) && 
                IsChineseLanguage($"{language.Code}-{language.RegionCode}"));
    }
}

/// <summary>
/// 中国語変種の列挙型
/// </summary>
public enum ChineseVariant
{
    /// <summary>
    /// 自動判定（デフォルト）
    /// </summary>
    Auto,

    /// <summary>
    /// 簡体字
    /// </summary>
    Simplified,

    /// <summary>
    /// 繁体字
    /// </summary>
    Traditional,

    /// <summary>
    /// 広東語
    /// </summary>
    Cantonese
}
