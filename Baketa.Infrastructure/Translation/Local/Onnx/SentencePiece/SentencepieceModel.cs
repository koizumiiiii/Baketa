// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sentencepiece_model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sentencepiece {

  /// <summary>Holder for reflection information generated from sentencepiece_model.proto</summary>
  public static partial class SentencepieceModelReflection {

    #region Descriptor
    /// <summary>File descriptor for sentencepiece_model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SentencepieceModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlzZW50ZW5jZXBpZWNlX21vZGVsLnByb3RvEg1zZW50ZW5jZXBpZWNlIqEO",
            "CgpNb2RlbFByb3RvEjcKBnBpZWNlcxgBIAMoCzInLnNlbnRlbmNlcGllY2Uu",
            "TW9kZWxQcm90by5TZW50ZW5jZVBpZWNlEjsKDHRyYWluZXJfc3BlYxgCIAEo",
            "CzIlLnNlbnRlbmNlcGllY2UuTW9kZWxQcm90by5UcmFpbmVyU3BlYxJBCg9u",
            "b3JtYWxpemVyX3NwZWMYAyABKAsyKC5zZW50ZW5jZXBpZWNlLk1vZGVsUHJv",
            "dG8uTm9ybWFsaXplclNwZWMSFgoOc2VsZl90ZXN0X2RhdGEYBCADKAkSQwoR",
            "ZGVub3JtYWxpemVyX3NwZWMYBSABKAsyKC5zZW50ZW5jZXBpZWNlLk1vZGVs",
            "UHJvdG8uTm9ybWFsaXplclNwZWMaxwEKDVNlbnRlbmNlUGllY2USDQoFcGll",
            "Y2UYASABKAkSDQoFc2NvcmUYAiABKAISQgoEdHlwZRgDIAEoDjIsLnNlbnRl",
            "bmNlcGllY2UuTW9kZWxQcm90by5TZW50ZW5jZVBpZWNlLlR5cGU6Bk5PUk1B",
            "TCJUCgRUeXBlEgoKBk5PUk1BTBABEgsKB1VOS05PV04QAhILCgdDT05UUk9M",
            "EAMSEAoMVVNFUl9ERUZJTkVEEAQSCgoGVU5VU0VEEAUSCAoEQllURRAGGt4I",
            "CgtUcmFpbmVyU3BlYxJMCgptb2RlbF90eXBlGAEgASgOMi8uc2VudGVuY2Vw",
            "aWVjZS5Nb2RlbFByb3RvLlRyYWluZXJTcGVjLk1vZGVsVHlwZToHVU5JR1JB",
            "TRIYCgp2b2NhYl9zaXplGAIgASgFOgQ4MDAwEhcKD2FjY2VwdF9sYW5ndWFn",
            "ZRgDIAMoCRIgChVzZWxmX3Rlc3Rfc2FtcGxlX3NpemUYBCABKAU6ATASIgoS",
            "Y2hhcmFjdGVyX2NvdmVyYWdlGAUgASgCOgYwLjk5OTUSHgoTaW5wdXRfc2Vu",
            "dGVuY2Vfc2l6ZRgGIAEoBToBMBIhChZzaHVmZmxlX2lucHV0X3NlbnRlbmNl",
            "GAcgASgFOgExEiEKE21heF9zZW50ZW5jZV9sZW5ndGgYCCABKAU6BDQxOTIS",
            "JQoXc3BsaXRfYnlfdW5pY29kZV9zY3JpcHQYCSABKAg6BHRydWUSIQoTc3Bs",
            "aXRfYnlfd2hpdGVzcGFjZRgKIAEoCDoEdHJ1ZRIdCg9zcGxpdF9ieV9udW1i",
            "ZXIYCyABKAg6BHRydWUSKQoadHJlYXRfd2hpdGVzcGFjZV9hc19zdWZmaXgY",
            "DCABKAg6BWZhbHNlEisKHGFsbG93X3doaXRlc3BhY2Vfb25seV9waWVjZXMY",
            "DSABKAg6BWZhbHNlEhcKD2NvbnRyb2xfc3ltYm9scxgeIAMoCRIcChR1c2Vy",
            "X2RlZmluZWRfc3ltYm9scxgfIAMoCRIWCg5yZXF1aXJlZF9jaGFycxgkIAEo",
            "CRIcCg1ieXRlX2ZhbGxiYWNrGCMgASgIOgVmYWxzZRJyCh12b2NhYnVsYXJ5",
            "X291dHB1dF9waWVjZV9vcmRlchggIAEoDjJALnNlbnRlbmNlcGllY2UuTW9k",
            "ZWxQcm90by5UcmFpbmVyU3BlYy5Wb2NhYnVsYXJ5T3V0cHV0UGllY2VPcmRl",
            "cjoJU1BNX09SREVSEhsKEGhhcmRfdm9jYWJfbGltaXQYISABKAU6ATESHAoN",
            "dXNlX2FsbF92b2NhYhgiIAEoCDoFZmFsc2USGgoLdW5rX3N1cmZhY2UYKCAB",
            "KAk6BSDigYcgEhEKBnVua19pZBgpIAEoBToBMBIRCgZib3NfaWQYKiABKAU6",
            "ATESEQoGZW9zX2lkGCsgASgFOgEyEhIKBnBhZF9pZBgsIAEoBToCLTESGAoJ",
            "dW5rX3BpZWNlGC0gASgJOgU8dW5rPhIWCglib3NfcGllY2UYLiABKAk6Azxz",
            "PhIXCgllb3NfcGllY2UYLyABKAk6BDwvcz4SGAoJcGFkX3BpZWNlGDAgASgJ",
            "OgU8cGFkPiI1CglNb2RlbFR5cGUSCwoHVU5JR1JBTRABEgcKA0JQRRACEggK",
            "BFdPUkQQAxIICgRDSEFSEAQiQAoaVm9jYWJ1bGFyeU91dHB1dFBpZWNlT3Jk",
            "ZXISDQoJU1BNX09SREVSEAASEwoPRlJFUVVFTkNZX09SREVSEAEaxgEKDk5v",
            "cm1hbGl6ZXJTcGVjEgwKBG5hbWUYASABKAkSHAoUcHJlY29tcGlsZWRfY2hh",
            "cnNtYXAYAiABKAkSHgoQYWRkX2R1bW15X3ByZWZpeBgDIAEoCDoEdHJ1ZRIm",
            "ChhyZW1vdmVfZXh0cmFfd2hpdGVzcGFjZXMYBCABKAg6BHRydWUSIAoSZXNj",
            "YXBlX3doaXRlc3BhY2VzGAUgASgIOgR0cnVlEh4KFm5vcm1hbGl6YXRpb25f",
            "cnVsZV90c3YYBiABKAkqCQjIARCAgICAAkICSAM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sentencepiece.ModelProto), global::Sentencepiece.ModelProto.Parser, new[]{ "Pieces", "TrainerSpec", "NormalizerSpec", "SelfTestData", "DenormalizerSpec" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sentencepiece.ModelProto.Types.SentencePiece), global::Sentencepiece.ModelProto.Types.SentencePiece.Parser, new[]{ "Piece", "Score", "Type" }, null, new[]{ typeof(global::Sentencepiece.ModelProto.Types.SentencePiece.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sentencepiece.ModelProto.Types.TrainerSpec), global::Sentencepiece.ModelProto.Types.TrainerSpec.Parser, new[]{ "ModelType", "VocabSize", "AcceptLanguage", "SelfTestSampleSize", "CharacterCoverage", "InputSentenceSize", "ShuffleInputSentence", "MaxSentenceLength", "SplitByUnicodeScript", "SplitByWhitespace", "SplitByNumber", "TreatWhitespaceAsSuffix", "AllowWhitespaceOnlyPieces", "ControlSymbols", "UserDefinedSymbols", "RequiredChars", "ByteFallback", "VocabularyOutputPieceOrder", "HardVocabLimit", "UseAllVocab", "UnkSurface", "UnkId", "BosId", "EosId", "PadId", "UnkPiece", "BosPiece", "EosPiece", "PadPiece" }, null, new[]{ typeof(global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.ModelType), typeof(global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.VocabularyOutputPieceOrder) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sentencepiece.ModelProto.Types.NormalizerSpec), global::Sentencepiece.ModelProto.Types.NormalizerSpec.Parser, new[]{ "Name", "PrecompiledCharsmap", "AddDummyPrefix", "RemoveExtraWhitespaces", "EscapeWhitespaces", "NormalizationRuleTsv" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// SentencePiece model protocol buffer.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ModelProto : pb::IExtendableMessage<ModelProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModelProto> _parser = new pb::MessageParser<ModelProto>(() => new ModelProto());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<ModelProto> _extensions;
    private pb::ExtensionSet<ModelProto> _Extensions { get { return _extensions; } }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ModelProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sentencepiece.SentencepieceModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModelProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModelProto(ModelProto other) : this() {
      pieces_ = other.pieces_.Clone();
      trainerSpec_ = other.trainerSpec_ != null ? other.trainerSpec_.Clone() : null;
      normalizerSpec_ = other.normalizerSpec_ != null ? other.normalizerSpec_.Clone() : null;
      selfTestData_ = other.selfTestData_.Clone();
      denormalizerSpec_ = other.denormalizerSpec_ != null ? other.denormalizerSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModelProto Clone() {
      return new ModelProto(this);
    }

    /// <summary>Field number for the "pieces" field.</summary>
    public const int PiecesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sentencepiece.ModelProto.Types.SentencePiece> _repeated_pieces_codec
        = pb::FieldCodec.ForMessage(10, global::Sentencepiece.ModelProto.Types.SentencePiece.Parser);
    private readonly pbc::RepeatedField<global::Sentencepiece.ModelProto.Types.SentencePiece> pieces_ = new pbc::RepeatedField<global::Sentencepiece.ModelProto.Types.SentencePiece>();
    /// <summary>
    /// Model pieces.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Sentencepiece.ModelProto.Types.SentencePiece> Pieces {
      get { return pieces_; }
    }

    /// <summary>Field number for the "trainer_spec" field.</summary>
    public const int TrainerSpecFieldNumber = 2;
    private global::Sentencepiece.ModelProto.Types.TrainerSpec trainerSpec_;
    /// <summary>
    /// Trainer spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Sentencepiece.ModelProto.Types.TrainerSpec TrainerSpec {
      get { return trainerSpec_; }
      set {
        trainerSpec_ = value;
      }
    }

    /// <summary>Field number for the "normalizer_spec" field.</summary>
    public const int NormalizerSpecFieldNumber = 3;
    private global::Sentencepiece.ModelProto.Types.NormalizerSpec normalizerSpec_;
    /// <summary>
    /// Normalizer spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Sentencepiece.ModelProto.Types.NormalizerSpec NormalizerSpec {
      get { return normalizerSpec_; }
      set {
        normalizerSpec_ = value;
      }
    }

    /// <summary>Field number for the "self_test_data" field.</summary>
    public const int SelfTestDataFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_selfTestData_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> selfTestData_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Self-test data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> SelfTestData {
      get { return selfTestData_; }
    }

    /// <summary>Field number for the "denormalizer_spec" field.</summary>
    public const int DenormalizerSpecFieldNumber = 5;
    private global::Sentencepiece.ModelProto.Types.NormalizerSpec denormalizerSpec_;
    /// <summary>
    /// Denormalizer spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Sentencepiece.ModelProto.Types.NormalizerSpec DenormalizerSpec {
      get { return denormalizerSpec_; }
      set {
        denormalizerSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ModelProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ModelProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pieces_.Equals(other.pieces_)) return false;
      if (!object.Equals(TrainerSpec, other.TrainerSpec)) return false;
      if (!object.Equals(NormalizerSpec, other.NormalizerSpec)) return false;
      if(!selfTestData_.Equals(other.selfTestData_)) return false;
      if (!object.Equals(DenormalizerSpec, other.DenormalizerSpec)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pieces_.GetHashCode();
      if (trainerSpec_ != null) hash ^= TrainerSpec.GetHashCode();
      if (normalizerSpec_ != null) hash ^= NormalizerSpec.GetHashCode();
      hash ^= selfTestData_.GetHashCode();
      if (denormalizerSpec_ != null) hash ^= DenormalizerSpec.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pieces_.WriteTo(output, _repeated_pieces_codec);
      if (trainerSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrainerSpec);
      }
      if (normalizerSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NormalizerSpec);
      }
      selfTestData_.WriteTo(output, _repeated_selfTestData_codec);
      if (denormalizerSpec_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DenormalizerSpec);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pieces_.WriteTo(ref output, _repeated_pieces_codec);
      if (trainerSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrainerSpec);
      }
      if (normalizerSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NormalizerSpec);
      }
      selfTestData_.WriteTo(ref output, _repeated_selfTestData_codec);
      if (denormalizerSpec_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DenormalizerSpec);
      }
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += pieces_.CalculateSize(_repeated_pieces_codec);
      if (trainerSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainerSpec);
      }
      if (normalizerSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalizerSpec);
      }
      size += selfTestData_.CalculateSize(_repeated_selfTestData_codec);
      if (denormalizerSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DenormalizerSpec);
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ModelProto other) {
      if (other == null) {
        return;
      }
      pieces_.Add(other.pieces_);
      if (other.trainerSpec_ != null) {
        if (trainerSpec_ == null) {
          TrainerSpec = new global::Sentencepiece.ModelProto.Types.TrainerSpec();
        }
        TrainerSpec.MergeFrom(other.TrainerSpec);
      }
      if (other.normalizerSpec_ != null) {
        if (normalizerSpec_ == null) {
          NormalizerSpec = new global::Sentencepiece.ModelProto.Types.NormalizerSpec();
        }
        NormalizerSpec.MergeFrom(other.NormalizerSpec);
      }
      selfTestData_.Add(other.selfTestData_);
      if (other.denormalizerSpec_ != null) {
        if (denormalizerSpec_ == null) {
          DenormalizerSpec = new global::Sentencepiece.ModelProto.Types.NormalizerSpec();
        }
        DenormalizerSpec.MergeFrom(other.DenormalizerSpec);
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 10: {
            pieces_.AddEntriesFrom(input, _repeated_pieces_codec);
            break;
          }
          case 18: {
            if (trainerSpec_ == null) {
              TrainerSpec = new global::Sentencepiece.ModelProto.Types.TrainerSpec();
            }
            input.ReadMessage(TrainerSpec);
            break;
          }
          case 26: {
            if (normalizerSpec_ == null) {
              NormalizerSpec = new global::Sentencepiece.ModelProto.Types.NormalizerSpec();
            }
            input.ReadMessage(NormalizerSpec);
            break;
          }
          case 34: {
            selfTestData_.AddEntriesFrom(input, _repeated_selfTestData_codec);
            break;
          }
          case 42: {
            if (denormalizerSpec_ == null) {
              DenormalizerSpec = new global::Sentencepiece.ModelProto.Types.NormalizerSpec();
            }
            input.ReadMessage(DenormalizerSpec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 10: {
            pieces_.AddEntriesFrom(ref input, _repeated_pieces_codec);
            break;
          }
          case 18: {
            if (trainerSpec_ == null) {
              TrainerSpec = new global::Sentencepiece.ModelProto.Types.TrainerSpec();
            }
            input.ReadMessage(TrainerSpec);
            break;
          }
          case 26: {
            if (normalizerSpec_ == null) {
              NormalizerSpec = new global::Sentencepiece.ModelProto.Types.NormalizerSpec();
            }
            input.ReadMessage(NormalizerSpec);
            break;
          }
          case 34: {
            selfTestData_.AddEntriesFrom(ref input, _repeated_selfTestData_codec);
            break;
          }
          case 42: {
            if (denormalizerSpec_ == null) {
              DenormalizerSpec = new global::Sentencepiece.ModelProto.Types.NormalizerSpec();
            }
            input.ReadMessage(DenormalizerSpec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<ModelProto, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<ModelProto, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<ModelProto, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<ModelProto, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<ModelProto, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<ModelProto, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<ModelProto, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ModelProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class SentencePiece : pb::IMessage<SentencePiece>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SentencePiece> _parser = new pb::MessageParser<SentencePiece>(() => new SentencePiece());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<SentencePiece> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sentencepiece.ModelProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SentencePiece() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SentencePiece(SentencePiece other) : this() {
          _hasBits0 = other._hasBits0;
          piece_ = other.piece_;
          score_ = other.score_;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SentencePiece Clone() {
          return new SentencePiece(this);
        }

        /// <summary>Field number for the "piece" field.</summary>
        public const int PieceFieldNumber = 1;
        private readonly static string PieceDefaultValue = "";

        private string piece_;
        /// <summary>
        /// piece string
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Piece {
          get { return piece_ ?? PieceDefaultValue; }
          set {
            piece_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "piece" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPiece {
          get { return piece_ != null; }
        }
        /// <summary>Clears the value of the "piece" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPiece() {
          piece_ = null;
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private readonly static float ScoreDefaultValue = 0F;

        private float score_;
        /// <summary>
        /// logprob of this piece
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Score {
          get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
          set {
            _hasBits0 |= 1;
            score_ = value;
          }
        }
        /// <summary>Gets whether the "score" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasScore {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "score" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearScore() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private readonly static global::Sentencepiece.ModelProto.Types.SentencePiece.Types.Type TypeDefaultValue = global::Sentencepiece.ModelProto.Types.SentencePiece.Types.Type.Normal;

        private global::Sentencepiece.ModelProto.Types.SentencePiece.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Sentencepiece.ModelProto.Types.SentencePiece.Types.Type Type {
          get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearType() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as SentencePiece);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(SentencePiece other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Piece != other.Piece) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPiece) hash ^= Piece.GetHashCode();
          if (HasScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
          if (HasType) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasPiece) {
            output.WriteRawTag(10);
            output.WriteString(Piece);
          }
          if (HasScore) {
            output.WriteRawTag(21);
            output.WriteFloat(Score);
          }
          if (HasType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasPiece) {
            output.WriteRawTag(10);
            output.WriteString(Piece);
          }
          if (HasScore) {
            output.WriteRawTag(21);
            output.WriteFloat(Score);
          }
          if (HasType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasPiece) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Piece);
          }
          if (HasScore) {
            size += 1 + 4;
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(SentencePiece other) {
          if (other == null) {
            return;
          }
          if (other.HasPiece) {
            Piece = other.Piece;
          }
          if (other.HasScore) {
            Score = other.Score;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Piece = input.ReadString();
                break;
              }
              case 21: {
                Score = input.ReadFloat();
                break;
              }
              case 24: {
                Type = (global::Sentencepiece.ModelProto.Types.SentencePiece.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Piece = input.ReadString();
                break;
              }
              case 21: {
                Score = input.ReadFloat();
                break;
              }
              case 24: {
                Type = (global::Sentencepiece.ModelProto.Types.SentencePiece.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SentencePiece message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum Type {
            /// <summary>
            /// normal symbol
            /// </summary>
            [pbr::OriginalName("NORMAL")] Normal = 1,
            /// <summary>
            /// unknown symbol
            /// </summary>
            [pbr::OriginalName("UNKNOWN")] Unknown = 2,
            /// <summary>
            /// control symbol
            /// </summary>
            [pbr::OriginalName("CONTROL")] Control = 3,
            /// <summary>
            /// user defined symbol
            /// </summary>
            [pbr::OriginalName("USER_DEFINED")] UserDefined = 4,
            /// <summary>
            /// unused symbol
            /// </summary>
            [pbr::OriginalName("UNUSED")] Unused = 5,
            /// <summary>
            /// byte symbol
            /// </summary>
            [pbr::OriginalName("BYTE")] Byte = 6,
          }

        }
        #endregion

      }

      /// <summary>
      /// Trainer specifications.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class TrainerSpec : pb::IMessage<TrainerSpec>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TrainerSpec> _parser = new pb::MessageParser<TrainerSpec>(() => new TrainerSpec());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TrainerSpec> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sentencepiece.ModelProto.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrainerSpec() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrainerSpec(TrainerSpec other) : this() {
          _hasBits0 = other._hasBits0;
          modelType_ = other.modelType_;
          vocabSize_ = other.vocabSize_;
          acceptLanguage_ = other.acceptLanguage_.Clone();
          selfTestSampleSize_ = other.selfTestSampleSize_;
          characterCoverage_ = other.characterCoverage_;
          inputSentenceSize_ = other.inputSentenceSize_;
          shuffleInputSentence_ = other.shuffleInputSentence_;
          maxSentenceLength_ = other.maxSentenceLength_;
          splitByUnicodeScript_ = other.splitByUnicodeScript_;
          splitByWhitespace_ = other.splitByWhitespace_;
          splitByNumber_ = other.splitByNumber_;
          treatWhitespaceAsSuffix_ = other.treatWhitespaceAsSuffix_;
          allowWhitespaceOnlyPieces_ = other.allowWhitespaceOnlyPieces_;
          controlSymbols_ = other.controlSymbols_.Clone();
          userDefinedSymbols_ = other.userDefinedSymbols_.Clone();
          requiredChars_ = other.requiredChars_;
          byteFallback_ = other.byteFallback_;
          vocabularyOutputPieceOrder_ = other.vocabularyOutputPieceOrder_;
          hardVocabLimit_ = other.hardVocabLimit_;
          useAllVocab_ = other.useAllVocab_;
          unkSurface_ = other.unkSurface_;
          unkId_ = other.unkId_;
          bosId_ = other.bosId_;
          eosId_ = other.eosId_;
          padId_ = other.padId_;
          unkPiece_ = other.unkPiece_;
          bosPiece_ = other.bosPiece_;
          eosPiece_ = other.eosPiece_;
          padPiece_ = other.padPiece_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrainerSpec Clone() {
          return new TrainerSpec(this);
        }

        /// <summary>Field number for the "model_type" field.</summary>
        public const int ModelTypeFieldNumber = 1;
        private readonly static global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.ModelType ModelTypeDefaultValue = global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.ModelType.Unigram;

        private global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.ModelType modelType_;
        /// <summary>
        /// Required: model algorithm. see ModelType enum.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.ModelType ModelType {
          get { if ((_hasBits0 & 1) != 0) { return modelType_; } else { return ModelTypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            modelType_ = value;
          }
        }
        /// <summary>Gets whether the "model_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasModelType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "model_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearModelType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "vocab_size" field.</summary>
        public const int VocabSizeFieldNumber = 2;
        private readonly static int VocabSizeDefaultValue = 8000;

        private int vocabSize_;
        /// <summary>
        /// Vocabulary size. 32000 is the default size.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int VocabSize {
          get { if ((_hasBits0 & 2) != 0) { return vocabSize_; } else { return VocabSizeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            vocabSize_ = value;
          }
        }
        /// <summary>Gets whether the "vocab_size" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasVocabSize {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "vocab_size" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearVocabSize() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "accept_language" field.</summary>
        public const int AcceptLanguageFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_acceptLanguage_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> acceptLanguage_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// List of the languages.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> AcceptLanguage {
          get { return acceptLanguage_; }
        }

        /// <summary>Field number for the "self_test_sample_size" field.</summary>
        public const int SelfTestSampleSizeFieldNumber = 4;
        private readonly static int SelfTestSampleSizeDefaultValue = 0;

        private int selfTestSampleSize_;
        /// <summary>
        /// SelfTestLevel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SelfTestSampleSize {
          get { if ((_hasBits0 & 4) != 0) { return selfTestSampleSize_; } else { return SelfTestSampleSizeDefaultValue; } }
          set {
            _hasBits0 |= 4;
            selfTestSampleSize_ = value;
          }
        }
        /// <summary>Gets whether the "self_test_sample_size" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasSelfTestSampleSize {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "self_test_sample_size" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearSelfTestSampleSize() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "character_coverage" field.</summary>
        public const int CharacterCoverageFieldNumber = 5;
        private readonly static float CharacterCoverageDefaultValue = 0.9995F;

        private float characterCoverage_;
        /// <summary>
        /// Character coverage to determine the minimum symbols.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float CharacterCoverage {
          get { if ((_hasBits0 & 8) != 0) { return characterCoverage_; } else { return CharacterCoverageDefaultValue; } }
          set {
            _hasBits0 |= 8;
            characterCoverage_ = value;
          }
        }
        /// <summary>Gets whether the "character_coverage" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCharacterCoverage {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "character_coverage" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCharacterCoverage() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "input_sentence_size" field.</summary>
        public const int InputSentenceSizeFieldNumber = 6;
        private readonly static int InputSentenceSizeDefaultValue = 0;

        private int inputSentenceSize_;
        /// <summary>
        /// Limit of input sentence length passed to SentencePieceTrainer.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int InputSentenceSize {
          get { if ((_hasBits0 & 16) != 0) { return inputSentenceSize_; } else { return InputSentenceSizeDefaultValue; } }
          set {
            _hasBits0 |= 16;
            inputSentenceSize_ = value;
          }
        }
        /// <summary>Gets whether the "input_sentence_size" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasInputSentenceSize {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "input_sentence_size" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearInputSentenceSize() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "shuffle_input_sentence" field.</summary>
        public const int ShuffleInputSentenceFieldNumber = 7;
        private readonly static int ShuffleInputSentenceDefaultValue = 1;

        private int shuffleInputSentence_;
        /// <summary>
        /// Limit of sentences the trainer loads.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ShuffleInputSentence {
          get { if ((_hasBits0 & 32) != 0) { return shuffleInputSentence_; } else { return ShuffleInputSentenceDefaultValue; } }
          set {
            _hasBits0 |= 32;
            shuffleInputSentence_ = value;
          }
        }
        /// <summary>Gets whether the "shuffle_input_sentence" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasShuffleInputSentence {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "shuffle_input_sentence" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearShuffleInputSentence() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "max_sentence_length" field.</summary>
        public const int MaxSentenceLengthFieldNumber = 8;
        private readonly static int MaxSentenceLengthDefaultValue = 4192;

        private int maxSentenceLength_;
        /// <summary>
        /// Maximum size of sentences the trainer loads.
        /// Default value is the maximum value of int32.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MaxSentenceLength {
          get { if ((_hasBits0 & 64) != 0) { return maxSentenceLength_; } else { return MaxSentenceLengthDefaultValue; } }
          set {
            _hasBits0 |= 64;
            maxSentenceLength_ = value;
          }
        }
        /// <summary>Gets whether the "max_sentence_length" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMaxSentenceLength {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "max_sentence_length" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMaxSentenceLength() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "split_by_unicode_script" field.</summary>
        public const int SplitByUnicodeScriptFieldNumber = 9;
        private readonly static bool SplitByUnicodeScriptDefaultValue = true;

        private bool splitByUnicodeScript_;
        /// <summary>
        /// Use only the first max_sentence_length characters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool SplitByUnicodeScript {
          get { if ((_hasBits0 & 128) != 0) { return splitByUnicodeScript_; } else { return SplitByUnicodeScriptDefaultValue; } }
          set {
            _hasBits0 |= 128;
            splitByUnicodeScript_ = value;
          }
        }
        /// <summary>Gets whether the "split_by_unicode_script" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasSplitByUnicodeScript {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "split_by_unicode_script" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearSplitByUnicodeScript() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "split_by_whitespace" field.</summary>
        public const int SplitByWhitespaceFieldNumber = 10;
        private readonly static bool SplitByWhitespaceDefaultValue = true;

        private bool splitByWhitespace_;
        /// <summary>
        /// Split tokens by whitespace.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool SplitByWhitespace {
          get { if ((_hasBits0 & 256) != 0) { return splitByWhitespace_; } else { return SplitByWhitespaceDefaultValue; } }
          set {
            _hasBits0 |= 256;
            splitByWhitespace_ = value;
          }
        }
        /// <summary>Gets whether the "split_by_whitespace" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasSplitByWhitespace {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "split_by_whitespace" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearSplitByWhitespace() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "split_by_number" field.</summary>
        public const int SplitByNumberFieldNumber = 11;
        private readonly static bool SplitByNumberDefaultValue = true;

        private bool splitByNumber_;
        /// <summary>
        /// Split tokens by number.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool SplitByNumber {
          get { if ((_hasBits0 & 512) != 0) { return splitByNumber_; } else { return SplitByNumberDefaultValue; } }
          set {
            _hasBits0 |= 512;
            splitByNumber_ = value;
          }
        }
        /// <summary>Gets whether the "split_by_number" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasSplitByNumber {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "split_by_number" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearSplitByNumber() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "treat_whitespace_as_suffix" field.</summary>
        public const int TreatWhitespaceAsSuffixFieldNumber = 12;
        private readonly static bool TreatWhitespaceAsSuffixDefaultValue = false;

        private bool treatWhitespaceAsSuffix_;
        /// <summary>
        /// Treat whitespace as suffix instead of prefix.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool TreatWhitespaceAsSuffix {
          get { if ((_hasBits0 & 1024) != 0) { return treatWhitespaceAsSuffix_; } else { return TreatWhitespaceAsSuffixDefaultValue; } }
          set {
            _hasBits0 |= 1024;
            treatWhitespaceAsSuffix_ = value;
          }
        }
        /// <summary>Gets whether the "treat_whitespace_as_suffix" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTreatWhitespaceAsSuffix {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "treat_whitespace_as_suffix" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTreatWhitespaceAsSuffix() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "allow_whitespace_only_pieces" field.</summary>
        public const int AllowWhitespaceOnlyPiecesFieldNumber = 13;
        private readonly static bool AllowWhitespaceOnlyPiecesDefaultValue = false;

        private bool allowWhitespaceOnlyPieces_;
        /// <summary>
        /// Allow whitespace only pieces.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool AllowWhitespaceOnlyPieces {
          get { if ((_hasBits0 & 2048) != 0) { return allowWhitespaceOnlyPieces_; } else { return AllowWhitespaceOnlyPiecesDefaultValue; } }
          set {
            _hasBits0 |= 2048;
            allowWhitespaceOnlyPieces_ = value;
          }
        }
        /// <summary>Gets whether the "allow_whitespace_only_pieces" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasAllowWhitespaceOnlyPieces {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "allow_whitespace_only_pieces" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearAllowWhitespaceOnlyPieces() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "control_symbols" field.</summary>
        public const int ControlSymbolsFieldNumber = 30;
        private static readonly pb::FieldCodec<string> _repeated_controlSymbols_codec
            = pb::FieldCodec.ForString(242);
        private readonly pbc::RepeatedField<string> controlSymbols_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Control symbols
        /// User defined symbols
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> ControlSymbols {
          get { return controlSymbols_; }
        }

        /// <summary>Field number for the "user_defined_symbols" field.</summary>
        public const int UserDefinedSymbolsFieldNumber = 31;
        private static readonly pb::FieldCodec<string> _repeated_userDefinedSymbols_codec
            = pb::FieldCodec.ForString(250);
        private readonly pbc::RepeatedField<string> userDefinedSymbols_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// User defined symbols
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> UserDefinedSymbols {
          get { return userDefinedSymbols_; }
        }

        /// <summary>Field number for the "required_chars" field.</summary>
        public const int RequiredCharsFieldNumber = 36;
        private readonly static string RequiredCharsDefaultValue = "";

        private string requiredChars_;
        /// <summary>
        /// Required chars
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string RequiredChars {
          get { return requiredChars_ ?? RequiredCharsDefaultValue; }
          set {
            requiredChars_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "required_chars" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRequiredChars {
          get { return requiredChars_ != null; }
        }
        /// <summary>Clears the value of the "required_chars" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRequiredChars() {
          requiredChars_ = null;
        }

        /// <summary>Field number for the "byte_fallback" field.</summary>
        public const int ByteFallbackFieldNumber = 35;
        private readonly static bool ByteFallbackDefaultValue = false;

        private bool byteFallback_;
        /// <summary>
        /// Byte fallback
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool ByteFallback {
          get { if ((_hasBits0 & 32768) != 0) { return byteFallback_; } else { return ByteFallbackDefaultValue; } }
          set {
            _hasBits0 |= 32768;
            byteFallback_ = value;
          }
        }
        /// <summary>Gets whether the "byte_fallback" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasByteFallback {
          get { return (_hasBits0 & 32768) != 0; }
        }
        /// <summary>Clears the value of the "byte_fallback" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearByteFallback() {
          _hasBits0 &= ~32768;
        }

        /// <summary>Field number for the "vocabulary_output_piece_order" field.</summary>
        public const int VocabularyOutputPieceOrderFieldNumber = 32;
        private readonly static global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.VocabularyOutputPieceOrder VocabularyOutputPieceOrderDefaultValue = global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.VocabularyOutputPieceOrder.SpmOrder;

        private global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.VocabularyOutputPieceOrder vocabularyOutputPieceOrder_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.VocabularyOutputPieceOrder VocabularyOutputPieceOrder {
          get { if ((_hasBits0 & 4096) != 0) { return vocabularyOutputPieceOrder_; } else { return VocabularyOutputPieceOrderDefaultValue; } }
          set {
            _hasBits0 |= 4096;
            vocabularyOutputPieceOrder_ = value;
          }
        }
        /// <summary>Gets whether the "vocabulary_output_piece_order" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasVocabularyOutputPieceOrder {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "vocabulary_output_piece_order" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearVocabularyOutputPieceOrder() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "hard_vocab_limit" field.</summary>
        public const int HardVocabLimitFieldNumber = 33;
        private readonly static int HardVocabLimitDefaultValue = 1;

        private int hardVocabLimit_;
        /// <summary>
        /// Hard vocabulary limit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int HardVocabLimit {
          get { if ((_hasBits0 & 8192) != 0) { return hardVocabLimit_; } else { return HardVocabLimitDefaultValue; } }
          set {
            _hasBits0 |= 8192;
            hardVocabLimit_ = value;
          }
        }
        /// <summary>Gets whether the "hard_vocab_limit" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasHardVocabLimit {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "hard_vocab_limit" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearHardVocabLimit() {
          _hasBits0 &= ~8192;
        }

        /// <summary>Field number for the "use_all_vocab" field.</summary>
        public const int UseAllVocabFieldNumber = 34;
        private readonly static bool UseAllVocabDefaultValue = false;

        private bool useAllVocab_;
        /// <summary>
        /// Use all vocab
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseAllVocab {
          get { if ((_hasBits0 & 16384) != 0) { return useAllVocab_; } else { return UseAllVocabDefaultValue; } }
          set {
            _hasBits0 |= 16384;
            useAllVocab_ = value;
          }
        }
        /// <summary>Gets whether the "use_all_vocab" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasUseAllVocab {
          get { return (_hasBits0 & 16384) != 0; }
        }
        /// <summary>Clears the value of the "use_all_vocab" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearUseAllVocab() {
          _hasBits0 &= ~16384;
        }

        /// <summary>Field number for the "unk_surface" field.</summary>
        public const int UnkSurfaceFieldNumber = 40;
        private readonly static string UnkSurfaceDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("IOKBhyA="), 0, 5);

        private string unkSurface_;
        /// <summary>
        /// UNK surface
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string UnkSurface {
          get { return unkSurface_ ?? UnkSurfaceDefaultValue; }
          set {
            unkSurface_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "unk_surface" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasUnkSurface {
          get { return unkSurface_ != null; }
        }
        /// <summary>Clears the value of the "unk_surface" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearUnkSurface() {
          unkSurface_ = null;
        }

        /// <summary>Field number for the "unk_id" field.</summary>
        public const int UnkIdFieldNumber = 41;
        private readonly static int UnkIdDefaultValue = 0;

        private int unkId_;
        /// <summary>
        /// UNK id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int UnkId {
          get { if ((_hasBits0 & 65536) != 0) { return unkId_; } else { return UnkIdDefaultValue; } }
          set {
            _hasBits0 |= 65536;
            unkId_ = value;
          }
        }
        /// <summary>Gets whether the "unk_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasUnkId {
          get { return (_hasBits0 & 65536) != 0; }
        }
        /// <summary>Clears the value of the "unk_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearUnkId() {
          _hasBits0 &= ~65536;
        }

        /// <summary>Field number for the "bos_id" field.</summary>
        public const int BosIdFieldNumber = 42;
        private readonly static int BosIdDefaultValue = 1;

        private int bosId_;
        /// <summary>
        /// BOS id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int BosId {
          get { if ((_hasBits0 & 131072) != 0) { return bosId_; } else { return BosIdDefaultValue; } }
          set {
            _hasBits0 |= 131072;
            bosId_ = value;
          }
        }
        /// <summary>Gets whether the "bos_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBosId {
          get { return (_hasBits0 & 131072) != 0; }
        }
        /// <summary>Clears the value of the "bos_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBosId() {
          _hasBits0 &= ~131072;
        }

        /// <summary>Field number for the "eos_id" field.</summary>
        public const int EosIdFieldNumber = 43;
        private readonly static int EosIdDefaultValue = 2;

        private int eosId_;
        /// <summary>
        /// EOS id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int EosId {
          get { if ((_hasBits0 & 262144) != 0) { return eosId_; } else { return EosIdDefaultValue; } }
          set {
            _hasBits0 |= 262144;
            eosId_ = value;
          }
        }
        /// <summary>Gets whether the "eos_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasEosId {
          get { return (_hasBits0 & 262144) != 0; }
        }
        /// <summary>Clears the value of the "eos_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearEosId() {
          _hasBits0 &= ~262144;
        }

        /// <summary>Field number for the "pad_id" field.</summary>
        public const int PadIdFieldNumber = 44;
        private readonly static int PadIdDefaultValue = -1;

        private int padId_;
        /// <summary>
        /// PAD id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int PadId {
          get { if ((_hasBits0 & 524288) != 0) { return padId_; } else { return PadIdDefaultValue; } }
          set {
            _hasBits0 |= 524288;
            padId_ = value;
          }
        }
        /// <summary>Gets whether the "pad_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPadId {
          get { return (_hasBits0 & 524288) != 0; }
        }
        /// <summary>Clears the value of the "pad_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPadId() {
          _hasBits0 &= ~524288;
        }

        /// <summary>Field number for the "unk_piece" field.</summary>
        public const int UnkPieceFieldNumber = 45;
        private readonly static string UnkPieceDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("PHVuaz4="), 0, 5);

        private string unkPiece_;
        /// <summary>
        /// Piece to unk surface
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string UnkPiece {
          get { return unkPiece_ ?? UnkPieceDefaultValue; }
          set {
            unkPiece_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "unk_piece" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasUnkPiece {
          get { return unkPiece_ != null; }
        }
        /// <summary>Clears the value of the "unk_piece" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearUnkPiece() {
          unkPiece_ = null;
        }

        /// <summary>Field number for the "bos_piece" field.</summary>
        public const int BosPieceFieldNumber = 46;
        private readonly static string BosPieceDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("PHM+"), 0, 3);

        private string bosPiece_;
        /// <summary>
        /// BOS piece.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string BosPiece {
          get { return bosPiece_ ?? BosPieceDefaultValue; }
          set {
            bosPiece_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "bos_piece" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBosPiece {
          get { return bosPiece_ != null; }
        }
        /// <summary>Clears the value of the "bos_piece" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBosPiece() {
          bosPiece_ = null;
        }

        /// <summary>Field number for the "eos_piece" field.</summary>
        public const int EosPieceFieldNumber = 47;
        private readonly static string EosPieceDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("PC9zPg=="), 0, 4);

        private string eosPiece_;
        /// <summary>
        /// EOS piece.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string EosPiece {
          get { return eosPiece_ ?? EosPieceDefaultValue; }
          set {
            eosPiece_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "eos_piece" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasEosPiece {
          get { return eosPiece_ != null; }
        }
        /// <summary>Clears the value of the "eos_piece" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearEosPiece() {
          eosPiece_ = null;
        }

        /// <summary>Field number for the "pad_piece" field.</summary>
        public const int PadPieceFieldNumber = 48;
        private readonly static string PadPieceDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("PHBhZD4="), 0, 5);

        private string padPiece_;
        /// <summary>
        /// PAD piece.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string PadPiece {
          get { return padPiece_ ?? PadPieceDefaultValue; }
          set {
            padPiece_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "pad_piece" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPadPiece {
          get { return padPiece_ != null; }
        }
        /// <summary>Clears the value of the "pad_piece" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPadPiece() {
          padPiece_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TrainerSpec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TrainerSpec other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ModelType != other.ModelType) return false;
          if (VocabSize != other.VocabSize) return false;
          if(!acceptLanguage_.Equals(other.acceptLanguage_)) return false;
          if (SelfTestSampleSize != other.SelfTestSampleSize) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CharacterCoverage, other.CharacterCoverage)) return false;
          if (InputSentenceSize != other.InputSentenceSize) return false;
          if (ShuffleInputSentence != other.ShuffleInputSentence) return false;
          if (MaxSentenceLength != other.MaxSentenceLength) return false;
          if (SplitByUnicodeScript != other.SplitByUnicodeScript) return false;
          if (SplitByWhitespace != other.SplitByWhitespace) return false;
          if (SplitByNumber != other.SplitByNumber) return false;
          if (TreatWhitespaceAsSuffix != other.TreatWhitespaceAsSuffix) return false;
          if (AllowWhitespaceOnlyPieces != other.AllowWhitespaceOnlyPieces) return false;
          if(!controlSymbols_.Equals(other.controlSymbols_)) return false;
          if(!userDefinedSymbols_.Equals(other.userDefinedSymbols_)) return false;
          if (RequiredChars != other.RequiredChars) return false;
          if (ByteFallback != other.ByteFallback) return false;
          if (VocabularyOutputPieceOrder != other.VocabularyOutputPieceOrder) return false;
          if (HardVocabLimit != other.HardVocabLimit) return false;
          if (UseAllVocab != other.UseAllVocab) return false;
          if (UnkSurface != other.UnkSurface) return false;
          if (UnkId != other.UnkId) return false;
          if (BosId != other.BosId) return false;
          if (EosId != other.EosId) return false;
          if (PadId != other.PadId) return false;
          if (UnkPiece != other.UnkPiece) return false;
          if (BosPiece != other.BosPiece) return false;
          if (EosPiece != other.EosPiece) return false;
          if (PadPiece != other.PadPiece) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasModelType) hash ^= ModelType.GetHashCode();
          if (HasVocabSize) hash ^= VocabSize.GetHashCode();
          hash ^= acceptLanguage_.GetHashCode();
          if (HasSelfTestSampleSize) hash ^= SelfTestSampleSize.GetHashCode();
          if (HasCharacterCoverage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CharacterCoverage);
          if (HasInputSentenceSize) hash ^= InputSentenceSize.GetHashCode();
          if (HasShuffleInputSentence) hash ^= ShuffleInputSentence.GetHashCode();
          if (HasMaxSentenceLength) hash ^= MaxSentenceLength.GetHashCode();
          if (HasSplitByUnicodeScript) hash ^= SplitByUnicodeScript.GetHashCode();
          if (HasSplitByWhitespace) hash ^= SplitByWhitespace.GetHashCode();
          if (HasSplitByNumber) hash ^= SplitByNumber.GetHashCode();
          if (HasTreatWhitespaceAsSuffix) hash ^= TreatWhitespaceAsSuffix.GetHashCode();
          if (HasAllowWhitespaceOnlyPieces) hash ^= AllowWhitespaceOnlyPieces.GetHashCode();
          hash ^= controlSymbols_.GetHashCode();
          hash ^= userDefinedSymbols_.GetHashCode();
          if (HasRequiredChars) hash ^= RequiredChars.GetHashCode();
          if (HasByteFallback) hash ^= ByteFallback.GetHashCode();
          if (HasVocabularyOutputPieceOrder) hash ^= VocabularyOutputPieceOrder.GetHashCode();
          if (HasHardVocabLimit) hash ^= HardVocabLimit.GetHashCode();
          if (HasUseAllVocab) hash ^= UseAllVocab.GetHashCode();
          if (HasUnkSurface) hash ^= UnkSurface.GetHashCode();
          if (HasUnkId) hash ^= UnkId.GetHashCode();
          if (HasBosId) hash ^= BosId.GetHashCode();
          if (HasEosId) hash ^= EosId.GetHashCode();
          if (HasPadId) hash ^= PadId.GetHashCode();
          if (HasUnkPiece) hash ^= UnkPiece.GetHashCode();
          if (HasBosPiece) hash ^= BosPiece.GetHashCode();
          if (HasEosPiece) hash ^= EosPiece.GetHashCode();
          if (HasPadPiece) hash ^= PadPiece.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasModelType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ModelType);
          }
          if (HasVocabSize) {
            output.WriteRawTag(16);
            output.WriteInt32(VocabSize);
          }
          acceptLanguage_.WriteTo(output, _repeated_acceptLanguage_codec);
          if (HasSelfTestSampleSize) {
            output.WriteRawTag(32);
            output.WriteInt32(SelfTestSampleSize);
          }
          if (HasCharacterCoverage) {
            output.WriteRawTag(45);
            output.WriteFloat(CharacterCoverage);
          }
          if (HasInputSentenceSize) {
            output.WriteRawTag(48);
            output.WriteInt32(InputSentenceSize);
          }
          if (HasShuffleInputSentence) {
            output.WriteRawTag(56);
            output.WriteInt32(ShuffleInputSentence);
          }
          if (HasMaxSentenceLength) {
            output.WriteRawTag(64);
            output.WriteInt32(MaxSentenceLength);
          }
          if (HasSplitByUnicodeScript) {
            output.WriteRawTag(72);
            output.WriteBool(SplitByUnicodeScript);
          }
          if (HasSplitByWhitespace) {
            output.WriteRawTag(80);
            output.WriteBool(SplitByWhitespace);
          }
          if (HasSplitByNumber) {
            output.WriteRawTag(88);
            output.WriteBool(SplitByNumber);
          }
          if (HasTreatWhitespaceAsSuffix) {
            output.WriteRawTag(96);
            output.WriteBool(TreatWhitespaceAsSuffix);
          }
          if (HasAllowWhitespaceOnlyPieces) {
            output.WriteRawTag(104);
            output.WriteBool(AllowWhitespaceOnlyPieces);
          }
          controlSymbols_.WriteTo(output, _repeated_controlSymbols_codec);
          userDefinedSymbols_.WriteTo(output, _repeated_userDefinedSymbols_codec);
          if (HasVocabularyOutputPieceOrder) {
            output.WriteRawTag(128, 2);
            output.WriteEnum((int) VocabularyOutputPieceOrder);
          }
          if (HasHardVocabLimit) {
            output.WriteRawTag(136, 2);
            output.WriteInt32(HardVocabLimit);
          }
          if (HasUseAllVocab) {
            output.WriteRawTag(144, 2);
            output.WriteBool(UseAllVocab);
          }
          if (HasByteFallback) {
            output.WriteRawTag(152, 2);
            output.WriteBool(ByteFallback);
          }
          if (HasRequiredChars) {
            output.WriteRawTag(162, 2);
            output.WriteString(RequiredChars);
          }
          if (HasUnkSurface) {
            output.WriteRawTag(194, 2);
            output.WriteString(UnkSurface);
          }
          if (HasUnkId) {
            output.WriteRawTag(200, 2);
            output.WriteInt32(UnkId);
          }
          if (HasBosId) {
            output.WriteRawTag(208, 2);
            output.WriteInt32(BosId);
          }
          if (HasEosId) {
            output.WriteRawTag(216, 2);
            output.WriteInt32(EosId);
          }
          if (HasPadId) {
            output.WriteRawTag(224, 2);
            output.WriteInt32(PadId);
          }
          if (HasUnkPiece) {
            output.WriteRawTag(234, 2);
            output.WriteString(UnkPiece);
          }
          if (HasBosPiece) {
            output.WriteRawTag(242, 2);
            output.WriteString(BosPiece);
          }
          if (HasEosPiece) {
            output.WriteRawTag(250, 2);
            output.WriteString(EosPiece);
          }
          if (HasPadPiece) {
            output.WriteRawTag(130, 3);
            output.WriteString(PadPiece);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasModelType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ModelType);
          }
          if (HasVocabSize) {
            output.WriteRawTag(16);
            output.WriteInt32(VocabSize);
          }
          acceptLanguage_.WriteTo(ref output, _repeated_acceptLanguage_codec);
          if (HasSelfTestSampleSize) {
            output.WriteRawTag(32);
            output.WriteInt32(SelfTestSampleSize);
          }
          if (HasCharacterCoverage) {
            output.WriteRawTag(45);
            output.WriteFloat(CharacterCoverage);
          }
          if (HasInputSentenceSize) {
            output.WriteRawTag(48);
            output.WriteInt32(InputSentenceSize);
          }
          if (HasShuffleInputSentence) {
            output.WriteRawTag(56);
            output.WriteInt32(ShuffleInputSentence);
          }
          if (HasMaxSentenceLength) {
            output.WriteRawTag(64);
            output.WriteInt32(MaxSentenceLength);
          }
          if (HasSplitByUnicodeScript) {
            output.WriteRawTag(72);
            output.WriteBool(SplitByUnicodeScript);
          }
          if (HasSplitByWhitespace) {
            output.WriteRawTag(80);
            output.WriteBool(SplitByWhitespace);
          }
          if (HasSplitByNumber) {
            output.WriteRawTag(88);
            output.WriteBool(SplitByNumber);
          }
          if (HasTreatWhitespaceAsSuffix) {
            output.WriteRawTag(96);
            output.WriteBool(TreatWhitespaceAsSuffix);
          }
          if (HasAllowWhitespaceOnlyPieces) {
            output.WriteRawTag(104);
            output.WriteBool(AllowWhitespaceOnlyPieces);
          }
          controlSymbols_.WriteTo(ref output, _repeated_controlSymbols_codec);
          userDefinedSymbols_.WriteTo(ref output, _repeated_userDefinedSymbols_codec);
          if (HasVocabularyOutputPieceOrder) {
            output.WriteRawTag(128, 2);
            output.WriteEnum((int) VocabularyOutputPieceOrder);
          }
          if (HasHardVocabLimit) {
            output.WriteRawTag(136, 2);
            output.WriteInt32(HardVocabLimit);
          }
          if (HasUseAllVocab) {
            output.WriteRawTag(144, 2);
            output.WriteBool(UseAllVocab);
          }
          if (HasByteFallback) {
            output.WriteRawTag(152, 2);
            output.WriteBool(ByteFallback);
          }
          if (HasRequiredChars) {
            output.WriteRawTag(162, 2);
            output.WriteString(RequiredChars);
          }
          if (HasUnkSurface) {
            output.WriteRawTag(194, 2);
            output.WriteString(UnkSurface);
          }
          if (HasUnkId) {
            output.WriteRawTag(200, 2);
            output.WriteInt32(UnkId);
          }
          if (HasBosId) {
            output.WriteRawTag(208, 2);
            output.WriteInt32(BosId);
          }
          if (HasEosId) {
            output.WriteRawTag(216, 2);
            output.WriteInt32(EosId);
          }
          if (HasPadId) {
            output.WriteRawTag(224, 2);
            output.WriteInt32(PadId);
          }
          if (HasUnkPiece) {
            output.WriteRawTag(234, 2);
            output.WriteString(UnkPiece);
          }
          if (HasBosPiece) {
            output.WriteRawTag(242, 2);
            output.WriteString(BosPiece);
          }
          if (HasEosPiece) {
            output.WriteRawTag(250, 2);
            output.WriteString(EosPiece);
          }
          if (HasPadPiece) {
            output.WriteRawTag(130, 3);
            output.WriteString(PadPiece);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasModelType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
          }
          if (HasVocabSize) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VocabSize);
          }
          size += acceptLanguage_.CalculateSize(_repeated_acceptLanguage_codec);
          if (HasSelfTestSampleSize) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfTestSampleSize);
          }
          if (HasCharacterCoverage) {
            size += 1 + 4;
          }
          if (HasInputSentenceSize) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputSentenceSize);
          }
          if (HasShuffleInputSentence) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShuffleInputSentence);
          }
          if (HasMaxSentenceLength) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSentenceLength);
          }
          if (HasSplitByUnicodeScript) {
            size += 1 + 1;
          }
          if (HasSplitByWhitespace) {
            size += 1 + 1;
          }
          if (HasSplitByNumber) {
            size += 1 + 1;
          }
          if (HasTreatWhitespaceAsSuffix) {
            size += 1 + 1;
          }
          if (HasAllowWhitespaceOnlyPieces) {
            size += 1 + 1;
          }
          size += controlSymbols_.CalculateSize(_repeated_controlSymbols_codec);
          size += userDefinedSymbols_.CalculateSize(_repeated_userDefinedSymbols_codec);
          if (HasRequiredChars) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(RequiredChars);
          }
          if (HasByteFallback) {
            size += 2 + 1;
          }
          if (HasVocabularyOutputPieceOrder) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VocabularyOutputPieceOrder);
          }
          if (HasHardVocabLimit) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(HardVocabLimit);
          }
          if (HasUseAllVocab) {
            size += 2 + 1;
          }
          if (HasUnkSurface) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(UnkSurface);
          }
          if (HasUnkId) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnkId);
          }
          if (HasBosId) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(BosId);
          }
          if (HasEosId) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(EosId);
          }
          if (HasPadId) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PadId);
          }
          if (HasUnkPiece) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(UnkPiece);
          }
          if (HasBosPiece) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(BosPiece);
          }
          if (HasEosPiece) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(EosPiece);
          }
          if (HasPadPiece) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(PadPiece);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TrainerSpec other) {
          if (other == null) {
            return;
          }
          if (other.HasModelType) {
            ModelType = other.ModelType;
          }
          if (other.HasVocabSize) {
            VocabSize = other.VocabSize;
          }
          acceptLanguage_.Add(other.acceptLanguage_);
          if (other.HasSelfTestSampleSize) {
            SelfTestSampleSize = other.SelfTestSampleSize;
          }
          if (other.HasCharacterCoverage) {
            CharacterCoverage = other.CharacterCoverage;
          }
          if (other.HasInputSentenceSize) {
            InputSentenceSize = other.InputSentenceSize;
          }
          if (other.HasShuffleInputSentence) {
            ShuffleInputSentence = other.ShuffleInputSentence;
          }
          if (other.HasMaxSentenceLength) {
            MaxSentenceLength = other.MaxSentenceLength;
          }
          if (other.HasSplitByUnicodeScript) {
            SplitByUnicodeScript = other.SplitByUnicodeScript;
          }
          if (other.HasSplitByWhitespace) {
            SplitByWhitespace = other.SplitByWhitespace;
          }
          if (other.HasSplitByNumber) {
            SplitByNumber = other.SplitByNumber;
          }
          if (other.HasTreatWhitespaceAsSuffix) {
            TreatWhitespaceAsSuffix = other.TreatWhitespaceAsSuffix;
          }
          if (other.HasAllowWhitespaceOnlyPieces) {
            AllowWhitespaceOnlyPieces = other.AllowWhitespaceOnlyPieces;
          }
          controlSymbols_.Add(other.controlSymbols_);
          userDefinedSymbols_.Add(other.userDefinedSymbols_);
          if (other.HasRequiredChars) {
            RequiredChars = other.RequiredChars;
          }
          if (other.HasByteFallback) {
            ByteFallback = other.ByteFallback;
          }
          if (other.HasVocabularyOutputPieceOrder) {
            VocabularyOutputPieceOrder = other.VocabularyOutputPieceOrder;
          }
          if (other.HasHardVocabLimit) {
            HardVocabLimit = other.HardVocabLimit;
          }
          if (other.HasUseAllVocab) {
            UseAllVocab = other.UseAllVocab;
          }
          if (other.HasUnkSurface) {
            UnkSurface = other.UnkSurface;
          }
          if (other.HasUnkId) {
            UnkId = other.UnkId;
          }
          if (other.HasBosId) {
            BosId = other.BosId;
          }
          if (other.HasEosId) {
            EosId = other.EosId;
          }
          if (other.HasPadId) {
            PadId = other.PadId;
          }
          if (other.HasUnkPiece) {
            UnkPiece = other.UnkPiece;
          }
          if (other.HasBosPiece) {
            BosPiece = other.BosPiece;
          }
          if (other.HasEosPiece) {
            EosPiece = other.EosPiece;
          }
          if (other.HasPadPiece) {
            PadPiece = other.PadPiece;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ModelType = (global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.ModelType) input.ReadEnum();
                break;
              }
              case 16: {
                VocabSize = input.ReadInt32();
                break;
              }
              case 26: {
                acceptLanguage_.AddEntriesFrom(input, _repeated_acceptLanguage_codec);
                break;
              }
              case 32: {
                SelfTestSampleSize = input.ReadInt32();
                break;
              }
              case 45: {
                CharacterCoverage = input.ReadFloat();
                break;
              }
              case 48: {
                InputSentenceSize = input.ReadInt32();
                break;
              }
              case 56: {
                ShuffleInputSentence = input.ReadInt32();
                break;
              }
              case 64: {
                MaxSentenceLength = input.ReadInt32();
                break;
              }
              case 72: {
                SplitByUnicodeScript = input.ReadBool();
                break;
              }
              case 80: {
                SplitByWhitespace = input.ReadBool();
                break;
              }
              case 88: {
                SplitByNumber = input.ReadBool();
                break;
              }
              case 96: {
                TreatWhitespaceAsSuffix = input.ReadBool();
                break;
              }
              case 104: {
                AllowWhitespaceOnlyPieces = input.ReadBool();
                break;
              }
              case 242: {
                controlSymbols_.AddEntriesFrom(input, _repeated_controlSymbols_codec);
                break;
              }
              case 250: {
                userDefinedSymbols_.AddEntriesFrom(input, _repeated_userDefinedSymbols_codec);
                break;
              }
              case 256: {
                VocabularyOutputPieceOrder = (global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.VocabularyOutputPieceOrder) input.ReadEnum();
                break;
              }
              case 264: {
                HardVocabLimit = input.ReadInt32();
                break;
              }
              case 272: {
                UseAllVocab = input.ReadBool();
                break;
              }
              case 280: {
                ByteFallback = input.ReadBool();
                break;
              }
              case 290: {
                RequiredChars = input.ReadString();
                break;
              }
              case 322: {
                UnkSurface = input.ReadString();
                break;
              }
              case 328: {
                UnkId = input.ReadInt32();
                break;
              }
              case 336: {
                BosId = input.ReadInt32();
                break;
              }
              case 344: {
                EosId = input.ReadInt32();
                break;
              }
              case 352: {
                PadId = input.ReadInt32();
                break;
              }
              case 362: {
                UnkPiece = input.ReadString();
                break;
              }
              case 370: {
                BosPiece = input.ReadString();
                break;
              }
              case 378: {
                EosPiece = input.ReadString();
                break;
              }
              case 386: {
                PadPiece = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ModelType = (global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.ModelType) input.ReadEnum();
                break;
              }
              case 16: {
                VocabSize = input.ReadInt32();
                break;
              }
              case 26: {
                acceptLanguage_.AddEntriesFrom(ref input, _repeated_acceptLanguage_codec);
                break;
              }
              case 32: {
                SelfTestSampleSize = input.ReadInt32();
                break;
              }
              case 45: {
                CharacterCoverage = input.ReadFloat();
                break;
              }
              case 48: {
                InputSentenceSize = input.ReadInt32();
                break;
              }
              case 56: {
                ShuffleInputSentence = input.ReadInt32();
                break;
              }
              case 64: {
                MaxSentenceLength = input.ReadInt32();
                break;
              }
              case 72: {
                SplitByUnicodeScript = input.ReadBool();
                break;
              }
              case 80: {
                SplitByWhitespace = input.ReadBool();
                break;
              }
              case 88: {
                SplitByNumber = input.ReadBool();
                break;
              }
              case 96: {
                TreatWhitespaceAsSuffix = input.ReadBool();
                break;
              }
              case 104: {
                AllowWhitespaceOnlyPieces = input.ReadBool();
                break;
              }
              case 242: {
                controlSymbols_.AddEntriesFrom(ref input, _repeated_controlSymbols_codec);
                break;
              }
              case 250: {
                userDefinedSymbols_.AddEntriesFrom(ref input, _repeated_userDefinedSymbols_codec);
                break;
              }
              case 256: {
                VocabularyOutputPieceOrder = (global::Sentencepiece.ModelProto.Types.TrainerSpec.Types.VocabularyOutputPieceOrder) input.ReadEnum();
                break;
              }
              case 264: {
                HardVocabLimit = input.ReadInt32();
                break;
              }
              case 272: {
                UseAllVocab = input.ReadBool();
                break;
              }
              case 280: {
                ByteFallback = input.ReadBool();
                break;
              }
              case 290: {
                RequiredChars = input.ReadString();
                break;
              }
              case 322: {
                UnkSurface = input.ReadString();
                break;
              }
              case 328: {
                UnkId = input.ReadInt32();
                break;
              }
              case 336: {
                BosId = input.ReadInt32();
                break;
              }
              case 344: {
                EosId = input.ReadInt32();
                break;
              }
              case 352: {
                PadId = input.ReadInt32();
                break;
              }
              case 362: {
                UnkPiece = input.ReadString();
                break;
              }
              case 370: {
                BosPiece = input.ReadString();
                break;
              }
              case 378: {
                EosPiece = input.ReadString();
                break;
              }
              case 386: {
                PadPiece = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the TrainerSpec message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum ModelType {
            /// <summary>
            /// Unigram language model
            /// </summary>
            [pbr::OriginalName("UNIGRAM")] Unigram = 1,
            /// <summary>
            /// Byte Pair Encoding
            /// </summary>
            [pbr::OriginalName("BPE")] Bpe = 2,
            /// <summary>
            /// Delimited by whitespace
            /// </summary>
            [pbr::OriginalName("WORD")] Word = 3,
            /// <summary>
            /// tokenizes into character sequence
            /// </summary>
            [pbr::OriginalName("CHAR")] Char = 4,
          }

          /// <summary>
          /// Vocabulary output piece order
          /// </summary>
          public enum VocabularyOutputPieceOrder {
            [pbr::OriginalName("SPM_ORDER")] SpmOrder = 0,
            [pbr::OriginalName("FREQUENCY_ORDER")] FrequencyOrder = 1,
          }

        }
        #endregion

      }

      /// <summary>
      /// Normalizer specifications.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class NormalizerSpec : pb::IMessage<NormalizerSpec>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<NormalizerSpec> _parser = new pb::MessageParser<NormalizerSpec>(() => new NormalizerSpec());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<NormalizerSpec> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sentencepiece.ModelProto.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public NormalizerSpec() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public NormalizerSpec(NormalizerSpec other) : this() {
          _hasBits0 = other._hasBits0;
          name_ = other.name_;
          precompiledCharsmap_ = other.precompiledCharsmap_;
          addDummyPrefix_ = other.addDummyPrefix_;
          removeExtraWhitespaces_ = other.removeExtraWhitespaces_;
          escapeWhitespaces_ = other.escapeWhitespaces_;
          normalizationRuleTsv_ = other.normalizationRuleTsv_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public NormalizerSpec Clone() {
          return new NormalizerSpec(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "precompiled_charsmap" field.</summary>
        public const int PrecompiledCharsmapFieldNumber = 2;
        private readonly static string PrecompiledCharsmapDefaultValue = "";

        private string precompiledCharsmap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string PrecompiledCharsmap {
          get { return precompiledCharsmap_ ?? PrecompiledCharsmapDefaultValue; }
          set {
            precompiledCharsmap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "precompiled_charsmap" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPrecompiledCharsmap {
          get { return precompiledCharsmap_ != null; }
        }
        /// <summary>Clears the value of the "precompiled_charsmap" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPrecompiledCharsmap() {
          precompiledCharsmap_ = null;
        }

        /// <summary>Field number for the "add_dummy_prefix" field.</summary>
        public const int AddDummyPrefixFieldNumber = 3;
        private readonly static bool AddDummyPrefixDefaultValue = true;

        private bool addDummyPrefix_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool AddDummyPrefix {
          get { if ((_hasBits0 & 1) != 0) { return addDummyPrefix_; } else { return AddDummyPrefixDefaultValue; } }
          set {
            _hasBits0 |= 1;
            addDummyPrefix_ = value;
          }
        }
        /// <summary>Gets whether the "add_dummy_prefix" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasAddDummyPrefix {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "add_dummy_prefix" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearAddDummyPrefix() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "remove_extra_whitespaces" field.</summary>
        public const int RemoveExtraWhitespacesFieldNumber = 4;
        private readonly static bool RemoveExtraWhitespacesDefaultValue = true;

        private bool removeExtraWhitespaces_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool RemoveExtraWhitespaces {
          get { if ((_hasBits0 & 2) != 0) { return removeExtraWhitespaces_; } else { return RemoveExtraWhitespacesDefaultValue; } }
          set {
            _hasBits0 |= 2;
            removeExtraWhitespaces_ = value;
          }
        }
        /// <summary>Gets whether the "remove_extra_whitespaces" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRemoveExtraWhitespaces {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "remove_extra_whitespaces" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRemoveExtraWhitespaces() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "escape_whitespaces" field.</summary>
        public const int EscapeWhitespacesFieldNumber = 5;
        private readonly static bool EscapeWhitespacesDefaultValue = true;

        private bool escapeWhitespaces_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool EscapeWhitespaces {
          get { if ((_hasBits0 & 4) != 0) { return escapeWhitespaces_; } else { return EscapeWhitespacesDefaultValue; } }
          set {
            _hasBits0 |= 4;
            escapeWhitespaces_ = value;
          }
        }
        /// <summary>Gets whether the "escape_whitespaces" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasEscapeWhitespaces {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "escape_whitespaces" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearEscapeWhitespaces() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "normalization_rule_tsv" field.</summary>
        public const int NormalizationRuleTsvFieldNumber = 6;
        private readonly static string NormalizationRuleTsvDefaultValue = "";

        private string normalizationRuleTsv_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string NormalizationRuleTsv {
          get { return normalizationRuleTsv_ ?? NormalizationRuleTsvDefaultValue; }
          set {
            normalizationRuleTsv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "normalization_rule_tsv" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNormalizationRuleTsv {
          get { return normalizationRuleTsv_ != null; }
        }
        /// <summary>Clears the value of the "normalization_rule_tsv" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNormalizationRuleTsv() {
          normalizationRuleTsv_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as NormalizerSpec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(NormalizerSpec other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (PrecompiledCharsmap != other.PrecompiledCharsmap) return false;
          if (AddDummyPrefix != other.AddDummyPrefix) return false;
          if (RemoveExtraWhitespaces != other.RemoveExtraWhitespaces) return false;
          if (EscapeWhitespaces != other.EscapeWhitespaces) return false;
          if (NormalizationRuleTsv != other.NormalizationRuleTsv) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasPrecompiledCharsmap) hash ^= PrecompiledCharsmap.GetHashCode();
          if (HasAddDummyPrefix) hash ^= AddDummyPrefix.GetHashCode();
          if (HasRemoveExtraWhitespaces) hash ^= RemoveExtraWhitespaces.GetHashCode();
          if (HasEscapeWhitespaces) hash ^= EscapeWhitespaces.GetHashCode();
          if (HasNormalizationRuleTsv) hash ^= NormalizationRuleTsv.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasPrecompiledCharsmap) {
            output.WriteRawTag(18);
            output.WriteString(PrecompiledCharsmap);
          }
          if (HasAddDummyPrefix) {
            output.WriteRawTag(24);
            output.WriteBool(AddDummyPrefix);
          }
          if (HasRemoveExtraWhitespaces) {
            output.WriteRawTag(32);
            output.WriteBool(RemoveExtraWhitespaces);
          }
          if (HasEscapeWhitespaces) {
            output.WriteRawTag(40);
            output.WriteBool(EscapeWhitespaces);
          }
          if (HasNormalizationRuleTsv) {
            output.WriteRawTag(50);
            output.WriteString(NormalizationRuleTsv);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasPrecompiledCharsmap) {
            output.WriteRawTag(18);
            output.WriteString(PrecompiledCharsmap);
          }
          if (HasAddDummyPrefix) {
            output.WriteRawTag(24);
            output.WriteBool(AddDummyPrefix);
          }
          if (HasRemoveExtraWhitespaces) {
            output.WriteRawTag(32);
            output.WriteBool(RemoveExtraWhitespaces);
          }
          if (HasEscapeWhitespaces) {
            output.WriteRawTag(40);
            output.WriteBool(EscapeWhitespaces);
          }
          if (HasNormalizationRuleTsv) {
            output.WriteRawTag(50);
            output.WriteString(NormalizationRuleTsv);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasPrecompiledCharsmap) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PrecompiledCharsmap);
          }
          if (HasAddDummyPrefix) {
            size += 1 + 1;
          }
          if (HasRemoveExtraWhitespaces) {
            size += 1 + 1;
          }
          if (HasEscapeWhitespaces) {
            size += 1 + 1;
          }
          if (HasNormalizationRuleTsv) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NormalizationRuleTsv);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(NormalizerSpec other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasPrecompiledCharsmap) {
            PrecompiledCharsmap = other.PrecompiledCharsmap;
          }
          if (other.HasAddDummyPrefix) {
            AddDummyPrefix = other.AddDummyPrefix;
          }
          if (other.HasRemoveExtraWhitespaces) {
            RemoveExtraWhitespaces = other.RemoveExtraWhitespaces;
          }
          if (other.HasEscapeWhitespaces) {
            EscapeWhitespaces = other.EscapeWhitespaces;
          }
          if (other.HasNormalizationRuleTsv) {
            NormalizationRuleTsv = other.NormalizationRuleTsv;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                PrecompiledCharsmap = input.ReadString();
                break;
              }
              case 24: {
                AddDummyPrefix = input.ReadBool();
                break;
              }
              case 32: {
                RemoveExtraWhitespaces = input.ReadBool();
                break;
              }
              case 40: {
                EscapeWhitespaces = input.ReadBool();
                break;
              }
              case 50: {
                NormalizationRuleTsv = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                PrecompiledCharsmap = input.ReadString();
                break;
              }
              case 24: {
                AddDummyPrefix = input.ReadBool();
                break;
              }
              case 32: {
                RemoveExtraWhitespaces = input.ReadBool();
                break;
              }
              case 40: {
                EscapeWhitespaces = input.ReadBool();
                break;
              }
              case 50: {
                NormalizationRuleTsv = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
