// SentencePiece model .proto definition
// Based on Google SentencePiece official schema

syntax = "proto2";

package sentencepiece;

option optimize_for = LITE_RUNTIME;

// SentencePiece model protocol buffer.
message ModelProto {
  message SentencePiece {
    enum Type {
      NORMAL = 1;        // normal symbol
      UNKNOWN = 2;       // unknown symbol
      CONTROL = 3;       // control symbol
      USER_DEFINED = 4;  // user defined symbol
      UNUSED = 5;        // unused symbol
      BYTE = 6;          // byte symbol
    }
    optional string piece = 1;    // piece string
    optional float score = 2;     // logprob of this piece
    optional Type type = 3 [default = NORMAL];
  }

  // Trainer specifications.
  message TrainerSpec {
    enum ModelType {
      UNIGRAM = 1;    // Unigram language model
      BPE = 2;        // Byte Pair Encoding
      WORD = 3;       // Delimited by whitespace
      CHAR = 4;       // tokenizes into character sequence
    }

    // Required: model algorithm. see ModelType enum.
    optional ModelType model_type = 1 [default = UNIGRAM];

    // Vocabulary size. 32000 is the default size.
    optional int32 vocab_size = 2 [default = 8000];

    // List of the languages.
    repeated string accept_language = 3;

    // SelfTestLevel
    optional int32 self_test_sample_size = 4 [default = 0];

    // Character coverage to determine the minimum symbols.
    optional float character_coverage = 5 [default = 0.9995];

    // Limit of input sentence length passed to SentencePieceTrainer.
    optional int32 input_sentence_size = 6 [default = 0];

    // Limit of sentences the trainer loads.
    optional int32 shuffle_input_sentence = 7 [default = 1];

    // Maximum size of sentences the trainer loads.
    // Default value is the maximum value of int32.
    optional int32 max_sentence_length = 8 [default = 4192];

    // Use only the first max_sentence_length characters.
    optional bool split_by_unicode_script = 9 [default = true];

    // Split tokens by whitespace.
    optional bool split_by_whitespace = 10 [default = true];

    // Split tokens by number.
    optional bool split_by_number = 11 [default = true];

    // Treat whitespace as suffix instead of prefix.
    optional bool treat_whitespace_as_suffix = 12 [default = false];

    // Allow whitespace only pieces.
    optional bool allow_whitespace_only_pieces = 13 [default = false];

    // Control symbols
    // User defined symbols
    repeated string control_symbols = 30;

    // User defined symbols
    repeated string user_defined_symbols = 31;

    // Required chars
    optional string required_chars = 36;

    // Byte fallback
    optional bool byte_fallback = 35 [default = false];

    // Vocabulary output piece order
    enum VocabularyOutputPieceOrder {
      SPM_ORDER = 0;
      FREQUENCY_ORDER = 1;
    }
    optional VocabularyOutputPieceOrder vocabulary_output_piece_order = 32 [default = SPM_ORDER];

    // Hard vocabulary limit.
    optional int32 hard_vocab_limit = 33 [default = 1];

    // Use all vocab
    optional bool use_all_vocab = 34 [default = false];

    // UNK surface
    optional string unk_surface = 40 [default = " \u2047 "];

    // UNK id.
    optional int32 unk_id = 41 [default = 0];

    // BOS id.
    optional int32 bos_id = 42 [default = 1];

    // EOS id.
    optional int32 eos_id = 43 [default = 2];

    // PAD id.
    optional int32 pad_id = 44 [default = -1];

    // Piece to unk surface
    optional string unk_piece = 45 [default = "<unk>"];

    // BOS piece.
    optional string bos_piece = 46 [default = "<s>"];

    // EOS piece.
    optional string eos_piece = 47 [default = "</s>"];

    // PAD piece.
    optional string pad_piece = 48 [default = "<pad>"];
  }

  // Normalizer specifications.
  message NormalizerSpec {
    optional string name = 1;
    optional string precompiled_charsmap = 2;
    optional bool add_dummy_prefix = 3 [default = true];
    optional bool remove_extra_whitespaces = 4 [default = true];
    optional bool escape_whitespaces = 5 [default = true];
    optional string normalization_rule_tsv = 6;
  }

  // Extension for third-party code.
  extensions 200 to max;

  // Model pieces.
  repeated SentencePiece pieces = 1;

  // Trainer spec.
  optional TrainerSpec trainer_spec = 2;

  // Normalizer spec.
  optional NormalizerSpec normalizer_spec = 3;

  // Self-test data.
  repeated string self_test_data = 4;

  // Denormalizer spec.
  optional NormalizerSpec denormalizer_spec = 5;
}