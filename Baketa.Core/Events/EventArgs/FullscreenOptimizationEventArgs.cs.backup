using System;
using Baketa.Core.Abstractions.Services;
using Baketa.Core.Settings;

namespace Baketa.Core.Events.EventArgs;

/// <summary>
/// フルスクリーン最適化適用イベント引数
/// </summary>
public sealed class FullscreenOptimizationAppliedEventArgs : System.EventArgs
{
    /// <summary>
    /// フルスクリーン情報
    /// </summary>
    public FullscreenInfo FullscreenInfo { get; }
    
    /// <summary>
    /// 最適化されたキャプチャ設定
    /// </summary>
    public CaptureSettings OptimizedSettings { get; }
    
    /// <summary>
    /// 元のキャプチャ設定
    /// </summary>
    public CaptureSettings? OriginalSettings { get; }
    
    /// <summary>
    /// 最適化適用日時
    /// </summary>
    public DateTime Timestamp { get; }
    
    /// <summary>
    /// FullscreenOptimizationAppliedEventArgsを初期化します
    /// </summary>
    /// <param name="fullscreenInfo">フルスクリーン情報</param>
    /// <param name="optimizedSettings">最適化されたキャプチャ設定</param>
    /// <param name="originalSettings">元のキャプチャ設定</param>
    public FullscreenOptimizationAppliedEventArgs(
        FullscreenInfo fullscreenInfo,
        CaptureSettings optimizedSettings,
        CaptureSettings? originalSettings = null)
    {
        FullscreenInfo = fullscreenInfo ?? throw new ArgumentNullException(nameof(fullscreenInfo));
        OptimizedSettings = optimizedSettings ?? throw new ArgumentNullException(nameof(optimizedSettings));
        OriginalSettings = originalSettings;
        Timestamp = DateTime.Now;
    }
}

/// <summary>
/// フルスクリーン最適化解除イベント引数
/// </summary>
public sealed class FullscreenOptimizationRemovedEventArgs : System.EventArgs
{
    /// <summary>
    /// 復元されたキャプチャ設定
    /// </summary>
    public CaptureSettings? RestoredSettings { get; }
    
    /// <summary>
    /// 解除理由
    /// </summary>
    public string Reason { get; }
    
    /// <summary>
    /// 最適化されていたウィンドウ情報
    /// </summary>
    public string? WindowInfo { get; }
    
    /// <summary>
    /// 最適化解除日時
    /// </summary>
    public DateTime Timestamp { get; }
    
    /// <summary>
    /// FullscreenOptimizationRemovedEventArgsを初期化します
    /// </summary>
    /// <param name="restoredSettings">復元されたキャプチャ設定</param>
    /// <param name="reason">解除理由</param>
    /// <param name="windowInfo">最適化されていたウィンドウ情報</param>
    public FullscreenOptimizationRemovedEventArgs(
        CaptureSettings? restoredSettings,
        string reason,
        string? windowInfo = null)
    {
        RestoredSettings = restoredSettings;
        Reason = reason ?? throw new ArgumentNullException(nameof(reason));
        WindowInfo = windowInfo;
        Timestamp = DateTime.Now;
    }
}

/// <summary>
/// フルスクリーン最適化エラーイベント引数
/// </summary>
public sealed class FullscreenOptimizationErrorEventArgs : System.EventArgs
{
    /// <summary>
    /// 発生した例外
    /// </summary>
    public Exception Exception { get; }
    
    /// <summary>
    /// エラーが発生したコンテキスト
    /// </summary>
    public string Context { get; }
    
    /// <summary>
    /// エラーメッセージ
    /// </summary>
    public string ErrorMessage => Exception.Message;
    
    /// <summary>
    /// エラー発生日時
    /// </summary>
    public DateTime Timestamp { get; }
    
    /// <summary>
    /// FullscreenOptimizationErrorEventArgsを初期化します
    /// </summary>
    /// <param name="exception">発生した例外</param>
    /// <param name="context">エラーが発生したコンテキスト</param>
    public FullscreenOptimizationErrorEventArgs(Exception exception, string context)
    {
        Exception = exception ?? throw new ArgumentNullException(nameof(exception));
        Context = context ?? throw new ArgumentNullException(nameof(context));
        Timestamp = DateTime.Now;
    }
}
