using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Baketa.Core.Translation.Abstractions;
using Baketa.Core.Translation.Common;
using Baketa.Core.Translation.Models;
using Microsoft.Extensions.Logging;

namespace Baketa.Core.Translation.Testing
{
    /// <summary>
    /// モック翻訳エンジン - テスト/デモ用
    /// </summary>
    public class MockTranslationEngine : TranslationEngineBase
    {
        private readonly Dictionary<string, Dictionary<string, Dictionary<string, string>>> _translationMap;
        private readonly int _simulatedDelayMs;
        private readonly float _simulatedErrorRate;
        private readonly Random _random = new Random();
        
        /// <summary>
        /// エンジン名
        /// </summary>
        public override string Name => "MockEngine";
        
        /// <summary>
        /// エンジンの説明
        /// </summary>
        public override string Description => "モック翻訳エンジン（テスト/デモ用）";
        
        /// <summary>
        /// ネットワーク接続が必要かどうか
        /// </summary>
        public override bool RequiresNetwork => false;

        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="logger">ロガー</param>
        /// <param name="simulatedDelayMs">シミュレートする処理遅延（ミリ秒）</param>
        /// <param name="simulatedErrorRate">シミュレートするエラー率（0.0～1.0）</param>
        public MockTranslationEngine(
            ILogger<MockTranslationEngine>? logger = null,
            int simulatedDelayMs = 100,
            float simulatedErrorRate = 0.0f)
            : base(logger)
        {
            _simulatedDelayMs = simulatedDelayMs;
            _simulatedErrorRate = Math.Clamp(simulatedErrorRate, 0.0f, 1.0f);
            _translationMap = InitializeTranslationMap();
        }

        /// <summary>
        /// 翻訳マップを初期化
        /// </summary>
        private Dictionary<string, Dictionary<string, Dictionary<string, string>>> InitializeTranslationMap()
        {
            var map = new Dictionary<string, Dictionary<string, Dictionary<string, string>>>();
            
            // 英語→日本語の翻訳
            var enMap = new Dictionary<string, Dictionary<string, string>>();
            map["en"] = enMap;
            
            var enJaMap = new Dictionary<string, string>
            {
                ["Hello"] = "こんにちは",
                ["Good morning"] = "おはようございます",
                ["Thank you"] = "ありがとう",
                ["Yes"] = "はい",
                ["No"] = "いいえ",
                ["Goodbye"] = "さようなら",
                ["How are you?"] = "お元気ですか？",
                ["I'm fine"] = "元気です",
                ["Sorry"] = "すみません",
                ["Please"] = "お願いします",
                ["What is this?"] = "これは何ですか？",
                ["Where is the station?"] = "駅はどこですか？",
                ["How much is this?"] = "これはいくらですか？",
                ["I don't understand"] = "わかりません",
                ["Can you help me?"] = "手伝っていただけますか？"
            };
            enMap["ja"] = enJaMap;
            
            // 英語→中国語の翻訳
            var enZhMap = new Dictionary<string, string>
            {
                ["Hello"] = "你好",
                ["Good morning"] = "早上好",
                ["Thank you"] = "谢谢",
                ["Yes"] = "是的",
                ["No"] = "不",
                ["Goodbye"] = "再见",
                ["How are you?"] = "你好吗？",
                ["I'm fine"] = "我很好",
                ["Sorry"] = "对不起",
                ["Please"] = "请",
                ["What is this?"] = "这是什么？",
                ["Where is the station?"] = "车站在哪里？",
                ["How much is this?"] = "这个多少钱？",
                ["I don't understand"] = "我不明白",
                ["Can you help me?"] = "你能帮我吗？"
            };
            enMap["zh-CN"] = enZhMap;
            
            // 日本語→英語の翻訳
            var jaMap = new Dictionary<string, Dictionary<string, string>>();
            map["ja"] = jaMap;
            
            var jaEnMap = new Dictionary<string, string>
            {
                ["こんにちは"] = "Hello",
                ["おはようございます"] = "Good morning",
                ["ありがとう"] = "Thank you",
                ["はい"] = "Yes",
                ["いいえ"] = "No",
                ["さようなら"] = "Goodbye",
                ["お元気ですか？"] = "How are you?",
                ["元気です"] = "I'm fine",
                ["すみません"] = "Sorry",
                ["お願いします"] = "Please",
                ["これは何ですか？"] = "What is this?",
                ["駅はどこですか？"] = "Where is the station?",
                ["これはいくらですか？"] = "How much is this?",
                ["わかりません"] = "I don't understand",
                ["手伝っていただけますか？"] = "Can you help me?"
            };
            jaMap["en"] = jaEnMap;
            
            // 日本語→中国語の翻訳
            var jaZhMap = new Dictionary<string, string>
            {
                ["こんにちは"] = "你好",
                ["おはようございます"] = "早上好",
                ["ありがとう"] = "谢谢",
                ["はい"] = "是的",
                ["いいえ"] = "不",
                ["さようなら"] = "再见",
                ["お元気ですか？"] = "你好吗？",
                ["元気です"] = "我很好",
                ["すみません"] = "对不起",
                ["お願いします"] = "请",
                ["これは何ですか？"] = "这是什么？",
                ["駅はどこですか？"] = "车站在哪里？",
                ["これはいくらですか？"] = "这个多少钱？",
                ["わかりません"] = "我不明白",
                ["手伝っていただけますか？"] = "你能帮我吗？"
            };
            jaMap["zh-CN"] = jaZhMap;
            
            return map;
        }

        /// <summary>
        /// 内部翻訳処理を実装
        /// </summary>
        protected override async Task<TranslationResponse> TranslateInternalAsync(
            TranslationRequest request, 
            CancellationToken cancellationToken)
        {
            // シミュレートした遅延
            if (_simulatedDelayMs > 0)
            {
                await Task.Delay(_simulatedDelayMs, cancellationToken).ConfigureAwait(false);
            }
            
            // ランダムエラーをシミュレート
            if (_simulatedErrorRate > 0 && _random.NextDouble() < _simulatedErrorRate)
            {
                return TranslationResponse.CreateError(
                    request,
                    new TranslationError { ErrorCode = "MockError", Message = "シミュレートされたエラー", IsRetryable = true },
                    Name);
            }
            
            string sourceCode = request.SourceLanguage.Code;
            string targetCode = request.TargetLanguage.Code;
            string sourceText = request.SourceText;
            
            // マップから翻訳結果を検索
            string? translatedText = null;
            
            if (_translationMap.TryGetValue(sourceCode, out var sourceToTargetMap))
            {
                if (sourceToTargetMap.TryGetValue(targetCode, out var textMap))
                {
                    if (textMap.TryGetValue(sourceText, out var result))
                    {
                        translatedText = result;
                    }
                }
            }
            
            if (translatedText == null)
            {
                // 見つからない場合は、デモ用にフェイクされた翻訳を生成
                translatedText = $"[{targetCode}] {sourceText}";
            }
            
            return TranslationResponse.CreateSuccess(
                request,
                translatedText,
                Name,
                _simulatedDelayMs);
        }

        /// <summary>
        /// 内部初期化処理を実装
        /// </summary>
        protected override Task<bool> InitializeInternalAsync()
        {
            // モックエンジンは常に初期化成功
            return Task.FromResult(true);
        }

        /// <summary>
        /// 内部でサポートされている言語ペアを取得する処理を実装
        /// </summary>
        protected override Task<IReadOnlyCollection<LanguagePair>> GetSupportedLanguagePairsInternalAsync()
        {
            var pairs = new List<LanguagePair>();
            
            foreach (var source in _translationMap.Keys)
            {
                var sourceLang = Language.FromCode(source);
                
                foreach (var target in _translationMap[source].Keys)
                {
                    var targetLang = Language.FromCode(target);
                    pairs.Add(new LanguagePair { SourceLanguage = sourceLang, TargetLanguage = targetLang });
                }
            }
            
            return Task.FromResult<IReadOnlyCollection<LanguagePair>>(pairs);
        }
    }
}