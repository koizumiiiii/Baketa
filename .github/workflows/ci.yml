name: CI Build and Test

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-native-dll:
    name: Build Native DLL (C++/WinRT)
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      
    - name: Build Native DLL
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        msbuild BaketaCaptureNative\BaketaCaptureNative.sln /p:Configuration=Debug /p:Platform=x64 /v:minimal
      shell: cmd
      
    - name: Upload Native DLL
      uses: actions/upload-artifact@v4
      with:
        name: native-dll
        path: |
          BaketaCaptureNative/bin/Debug/BaketaCaptureNative.dll
          BaketaCaptureNative/bin/Debug/BaketaCaptureNative.pdb
        retention-days: 1

  build-and-test:
    name: Build and Test .NET
    runs-on: windows-latest
    needs: build-native-dll
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Download Native DLL
      uses: actions/download-artifact@v5
      with:
        name: native-dll
        path: BaketaCaptureNative/bin/Debug/
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Copy Native DLL to Output
      run: |
        $outputPath = "Baketa.UI\bin\x64\Debug\net8.0-windows10.0.19041.0"
        New-Item -ItemType Directory -Path $outputPath -Force
        Copy-Item "BaketaCaptureNative\bin\Debug\BaketaCaptureNative.dll" $outputPath -Force
        Copy-Item "BaketaCaptureNative\bin\Debug\BaketaCaptureNative.pdb" $outputPath -Force
      shell: powershell
    
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
    
    - name: Build solution
      run: dotnet build --configuration Debug --no-restore --verbosity minimal
    
    - name: Run tests
      run: dotnet test --configuration Debug --no-build --verbosity minimal --logger "trx" --collect:"XPlat Code Coverage" -- RunConfiguration.MaxCpuCount=1 RunConfiguration.DisableParallelization=true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/**/*.trx
          **/TestResults/**/coverage.cobertura.xml
        if-no-files-found: warn
    
    - name: Build artifacts summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration: Debug" >> $GITHUB_STEP_SUMMARY
        echo "- Architecture: Any CPU (project-specific RID)" >> $GITHUB_STEP_SUMMARY
        echo "- .NET Version: ${{ env.DOTNET_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- OS: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY

  security-analysis:
    name: Security Analysis
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
    
    - name: Run security analysis
      run: dotnet build --configuration Release --no-restore --verbosity minimal
      continue-on-error: true
    
    - name: Security scan summary
      run: |
        echo "## Security Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Static analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration: Release" >> $GITHUB_STEP_SUMMARY