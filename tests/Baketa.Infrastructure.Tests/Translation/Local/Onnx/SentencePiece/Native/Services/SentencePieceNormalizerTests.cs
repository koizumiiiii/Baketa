using System;
using System.Globalization;
using Baketa.Infrastructure.Translation.Local.Onnx.SentencePiece.Native.Services;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;
using Xunit.Abstractions;

namespace Baketa.Infrastructure.Tests.Translation.Local.Onnx.SentencePiece.Native.Services;

/// <summary>
/// SentencePieceÊ≠£Ë¶èÂåñ„Çµ„Éº„Éì„Çπ„ÅÆÂçò‰Ωì„ÉÜ„Çπ„Éà
/// </summary>
public class SentencePieceNormalizerTests : IDisposable
{
    private readonly ITestOutputHelper _output;
    private readonly Mock<ILogger<SentencePieceNormalizer>> _mockLogger;
    private readonly SentencePieceNormalizer _normalizer;
    private bool _disposed;

    public SentencePieceNormalizerTests(ITestOutputHelper output)
    {
        _output = output;
        _mockLogger = new Mock<ILogger<SentencePieceNormalizer>>();
        _normalizer = new SentencePieceNormalizer(_mockLogger.Object);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData("hello", "‚ñÅhello")]
    [InlineData("Hello World", "‚ñÅHello‚ñÅWorld")]
    [InlineData("„Åì„Çì„Å´„Å°„ÅØ", "‚ñÅ„Åì„Çì„Å´„Å°„ÅØ")]
    [InlineData("„Åì„Çì„Å´„Å°„ÅØ ‰∏ñÁïå", "‚ñÅ„Åì„Çì„Å´„Å°„ÅØ‚ñÅ‰∏ñÁïå")]
    public void Normalize_BasicTexts_ShouldAddPrefixSpaceSymbol(string input, string expected)
    {
        // Act
        var result = _normalizer.Normalize(input);

        // Assert
        result.Should().Be(expected);
        _output.WriteLine($"‚úì '{input}' -> '{result}'");
    }

    [Theory]
    [InlineData("ÔΩàÔΩÖÔΩåÔΩåÔΩè", "‚ñÅhello")] // ÂÖ®ËßíËã±Â≠ó -> ÂçäËßíËã±Â≠ó
    [InlineData("ÔºëÔºíÔºì", "‚ñÅ123")] // ÂÖ®ËßíÊï∞Â≠ó -> ÂçäËßíÊï∞Â≠ó
    [InlineData("Ôº®ÔΩÖÔΩåÔΩåÔΩè„ÄÄÔº∑ÔΩèÔΩíÔΩåÔΩÑ", "‚ñÅHello‚ñÅWorld")] // ÂÖ®ËßíÁ©∫ÁôΩ -> ÂçäËßíÁ©∫ÁôΩ
    [InlineData("caf√©", "‚ñÅcaf√©")] // ÁµêÂêàÊñáÂ≠ó„ÅÆÊ≠£Ë¶èÂåñ
    public void Normalize_UnicodeCharacters_ShouldApplyNfkcNormalization(string input, string expected)
    {
        // Act
        var result = _normalizer.Normalize(input);

        // Assert
        result.Should().Be(expected);
        _output.WriteLine($"‚úì NFKC: '{input}' -> '{result}'");
    }

    [Theory]
    [InlineData("hello\tworld", "‚ñÅhello‚ñÅworld")] // „Çø„Éñ -> Á©∫ÁôΩ
    [InlineData("hello\nworld", "‚ñÅhello‚ñÅworld")] // ÊîπË°å -> Á©∫ÁôΩ
    [InlineData("hello\rworld", "‚ñÅhello‚ñÅworld")] // Âæ©Â∏∞ÊñáÂ≠ó -> Á©∫ÁôΩ
    [InlineData("hello\u0000world", "‚ñÅhelloworld")] // NULLÊñáÂ≠ó -> Èô§Âéª
    [InlineData("hello\u001Fworld", "‚ñÅhelloworld")] // Âà∂Âæ°ÊñáÂ≠ó -> Èô§Âéª
    public void Normalize_ControlCharacters_ShouldBeProcessedCorrectly(string input, string expected)
    {
        // Act
        var result = _normalizer.Normalize(input);

        // Assert
        result.Should().Be(expected);
        _output.WriteLine($"‚úì Control chars: '{input.Replace("\u0000", "\\0").Replace("\u001F", "\\u001F")}' -> '{result}'");
    }

    [Theory]
    [InlineData("hello   world", "‚ñÅhello‚ñÅworld")] // Ë§áÊï∞Á©∫ÁôΩ -> Âçò‰∏ÄÁ©∫ÁôΩ
    [InlineData("  hello  world  ", "‚ñÅhello‚ñÅworld")] // ÂâçÂæåÁ©∫ÁôΩ + Ë§áÊï∞Á©∫ÁôΩ
    [InlineData("hello\u3000world", "‚ñÅhello‚ñÅworld")] // ÂÖ®ËßíÁ©∫ÁôΩ -> ÂçäËßíÁ©∫ÁôΩ
    [InlineData("hello\u00A0world", "‚ñÅhello‚ñÅworld")] // „Éé„Éº„Éñ„É¨„Éº„ÇØ„Çπ„Éö„Éº„Çπ -> Á©∫ÁôΩ
    public void Normalize_WhitespaceCharacters_ShouldBeNormalized(string input, string expected)
    {
        // Act
        var result = _normalizer.Normalize(input);

        // Assert
        result.Should().Be(expected);
        _output.WriteLine($"‚úì Whitespace: '{input}' -> '{result}'");
    }

    [Theory]
    [InlineData("‚ñÅhello", "hello")]
    [InlineData("‚ñÅhello‚ñÅworld", "hello world")]
    [InlineData("‚ñÅ„Åì„Çì„Å´„Å°„ÅØ‚ñÅ‰∏ñÁïå", "„Åì„Çì„Å´„Å°„ÅØ ‰∏ñÁïå")]
    [InlineData("‚ñÅ", "")]
    [InlineData("", "")]
    public void RemovePrefixSpaceSymbol_ShouldRestoreOriginalSpaces(string input, string expected)
    {
        // Act
        var result = _normalizer.RemovePrefixSpaceSymbol(input);

        // Assert
        result.Should().Be(expected);
        _output.WriteLine($"‚úì Remove prefix: '{input}' -> '{result}'");
    }

    [Fact]
    public void Normalize_WithCustomOptions_ShouldRespectSettings()
    {
        // Arrange
        var options = new SentencePieceNormalizationOptions
        {
            ApplyNfkcNormalization = false,
            RemoveControlCharacters = false,
            NormalizeWhitespace = false,
            AddPrefixSpace = false
        };
        using var customNormalizer = new SentencePieceNormalizer(_mockLogger.Object, options);
        const string input = "ÔΩàÔΩÖÔΩåÔΩåÔΩè\tworld";

        // Act
        var result = customNormalizer.Normalize(input);

        // Assert
        result.Should().Be(input); // Ê≠£Ë¶èÂåñ„Å™„Åó„Å™„ÅÆ„ÅßÂÖÉ„ÅÆ„Åæ„Åæ
        _output.WriteLine($"‚úì No normalization: '{input}' -> '{result}'");
    }

    [Fact]
    public void Normalize_ComplexRealWorldText_ShouldHandleCorrectly()
    {
        // Arrange
        const string input = "Ôº®ÔΩÖÔΩåÔΩåÔΩèÔºå„ÄÄÔΩóÔΩèÔΩíÔΩåÔΩÑ!\n„Åì„Çì„Å´„Å°„ÅØ\t‰∏ñÁïåÔºÅ";
        const string expected = "‚ñÅHello,‚ñÅworld!‚ñÅ„Åì„Çì„Å´„Å°„ÅØ‚ñÅ‰∏ñÁïåÔºÅ";

        // Act
        var result = _normalizer.Normalize(input);

        // Assert
        result.Should().Be(expected);
        _output.WriteLine($"‚úì Complex text: '{input}' -> '{result}'");
    }

    [Fact]
    public void Normalize_EmojisAndSpecialCharacters_ShouldPreserveCorrectly()
    {
        // Arrange
        const string input = "Hello üòÄ World! üåç";
        const string expected = "‚ñÅHello‚ñÅüòÄ‚ñÅWorld!‚ñÅüåç";

        // Act
        var result = _normalizer.Normalize(input);

        // Assert
        result.Should().Be(expected);
        _output.WriteLine($"‚úì Emojis: '{input}' -> '{result}'");
    }

    [Fact]
    public void GetOptions_ShouldReturnCorrectOptions()
    {
        // Act
        var options = _normalizer.GetOptions();

        // Assert
        options.Should().NotBeNull();
        options.ApplyNfkcNormalization.Should().BeTrue();
        options.RemoveControlCharacters.Should().BeTrue();
        options.NormalizeWhitespace.Should().BeTrue();
        options.AddPrefixSpace.Should().BeTrue();
    }

    [Fact]
    public void DefaultOptions_ShouldHaveCorrectSettings()
    {
        // Act
        var options = SentencePieceNormalizationOptions.Default;

        // Assert
        options.ApplyNfkcNormalization.Should().BeTrue();
        options.RemoveControlCharacters.Should().BeTrue();
        options.NormalizeWhitespace.Should().BeTrue();
        options.AddPrefixSpace.Should().BeTrue();
    }

    [Fact]
    public void OpusMtOptions_ShouldHaveCorrectSettings()
    {
        // Act
        var options = SentencePieceNormalizationOptions.OpusMt;

        // Assert
        options.ApplyNfkcNormalization.Should().BeTrue();
        options.RemoveControlCharacters.Should().BeTrue();
        options.NormalizeWhitespace.Should().BeTrue();
        options.AddPrefixSpace.Should().BeTrue();
    }

    [Fact]
    public void NoneOptions_ShouldDisableAllNormalization()
    {
        // Act
        var options = SentencePieceNormalizationOptions.None;

        // Assert
        options.ApplyNfkcNormalization.Should().BeFalse();
        options.RemoveControlCharacters.Should().BeFalse();
        options.NormalizeWhitespace.Should().BeFalse();
        options.AddPrefixSpace.Should().BeFalse();
    }

    [Fact]
    public void SpaceSymbol_ShouldBeCorrectUnicodeCharacter()
    {
        // Assert
        SentencePieceNormalizer.SpaceSymbol.Should().Be('\u2581');
        ((int)SentencePieceNormalizer.SpaceSymbol).Should().Be(0x2581);
        _output.WriteLine($"‚úì Space symbol: '{SentencePieceNormalizer.SpaceSymbol}' (U+{(int)SentencePieceNormalizer.SpaceSymbol:X4})");
    }

    [Fact]
    public void Normalize_AfterDispose_ShouldThrowObjectDisposedException()
    {
        // Arrange
        _normalizer.Dispose();

        // Act & Assert
        var action = () => _normalizer.Normalize("test");
        action.Should().Throw<ObjectDisposedException>();
    }

    [Fact]
    public void RemovePrefixSpaceSymbol_AfterDispose_ShouldThrowObjectDisposedException()
    {
        // Arrange
        _normalizer.Dispose();

        // Act & Assert
        var action = () => _normalizer.RemovePrefixSpaceSymbol("‚ñÅtest");
        action.Should().Throw<ObjectDisposedException>();
    }

    [Theory]
    [InlineData("hello world", "‚ñÅhello‚ñÅworld", "hello world")]
    [InlineData("ÔΩàÔΩÖÔΩåÔΩåÔΩè„ÄÄÔΩóÔΩèÔΩíÔΩåÔΩÑ", "‚ñÅhello‚ñÅworld", "hello world")]
    [InlineData("Hello\tWorld", "‚ñÅHello‚ñÅWorld", "Hello World")]
    public void NormalizeAndReverse_ShouldBeConsistent(string original, string expectedNormalized, string expectedReversed)
    {
        // Act
        var normalized = _normalizer.Normalize(original);
        var reversed = _normalizer.RemovePrefixSpaceSymbol(normalized);

        // Assert
        normalized.Should().Be(expectedNormalized);
        reversed.Should().Be(expectedReversed);
        _output.WriteLine($"‚úì Round trip: '{original}' -> '{normalized}' -> '{reversed}'");
    }

    public void Dispose()
    {
        if (_disposed)
            return;

        _normalizer?.Dispose();
        _disposed = true;
        GC.SuppressFinalize(this);
    }
}