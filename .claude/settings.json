{
  "preferredNotifChannel": "terminal_bell",
  "taskCompletionNotification": true,
  "implementationCheckReminder": true,
  "errorNotificationEnabled": true,
  "permissions": {
    "allow": [
      "Bash(rg*)",
      "Bash(grep*)",
      "Bash(grep -*)",
      "Bash(*grep*)",
      "Bash(find*)",
      "Bash(find -*)",
      "Bash(ls*)",
      "Bash(cat*)",
      "Bash(head*)",
      "Bash(tail*)",
      "Bash(wc*)",
      "Bash(dotnet*)",
      "Bash(git status*)",
      "Bash(git log*)",
      "Bash(git diff*)",
      "Bash(gemini*)",
      "Edit(*)",
      "MultiEdit(*)",
      "Write(*)",
      "Read(*)",
      "Glob(*)",
      "LS(*)",
      "NotebookRead(*)",
      "NotebookEdit(*)"
    ],
    "deny": [
      "Bash(git commit*)",
      "Bash(git push*)",
      "Bash(rm*)",
      "Bash(sudo*)",
      "Bash(npm install*)",
      "Bash(pnpm install*)",
      "Bash(yarn install*)",
      "Read(.env*)",
      "Read(*.key)",
      "Read(*.secret)"
    ]
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'select(.tool_input.file_path | endswith(\".cs\")) | .tool_input.file_path' | xargs -r dotnet format --include"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'select(.tool_input.file_path | test(\"Baketa\\\\.Core/\")) | \"echo [Hook] Core layer file modified: \" + .tool_input.file_path' | sh"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'select(.tool_input.file_path | test(\"tests/.*Tests\\\\.cs$\")) | \"dotnet test --filter \\\"FullyQualifiedName~\" + (.tool_input.file_path | split(\"/\")[-1] | split(\".\")[0]) + \"\\\" --verbosity minimal\"' | sh"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'if .tool_input.command | test(\"dotnet test\") and (.output | test(\"Failed:\")) then \"powershell.exe -Command \\\"Write-Host \\\"⚠️ テスト失敗を検出しました。エラー内容を確認してください\\\" -ForegroundColor Red\\\"\" else \"\" end' | sh"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'select(.tool_input.file_path | test(\".*\\\\.(cs|csproj)$\")) | \"echo \\\"📊 [Stats] $(find . -name \\\"*.cs\\\" -not -path \\\"*/bin/*\\\" -not -path \\\"*/obj/*\\\" | wc -l) C# files, $(git status --porcelain | wc -l) uncommitted changes\\\"\"' | sh"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'if .tool_input.command | test(\"^(dotnet build|dotnet test|dotnet run|dotnet format)\") then \"{\\\"decision\\\": \\\"allow\\\", \\\"message\\\": \\\"🚀 dotnetコマンドを自動実行します\\\"}\" else \"\" end'"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'if .tool_input.command | test(\"^(rg|grep|find|ls|cat|head|tail)\") then \"{\\\"decision\\\": \\\"allow\\\", \\\"message\\\": \\\"🔍 検索/表示コマンドを自動実行します\\\"}\" else \"\" end'"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'if .tool_input.command | test(\"^(grep|find) \") then \"{\\\"decision\\\": \\\"suggest\\\", \\\"message\\\": \\\"💡 提案: ripgrep (rg) の方が10-50倍高速です。代わりに rg を使用することを推奨します\\\"}\" else \"\" end'"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'if .tool_input.file_path | test(\"(appsettings|Directory\\\\.Build\\\\.props|.*\\\\.csproj)$\") then \"{\\\"decision\\\": \\\"confirm\\\", \\\"message\\\": \\\"⚠️ 重要な設定ファイルを編集しようとしています。続行しますか？\\\"}\" else \"\" end'"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'if .tool_input.command | test(\"rm|del|Remove-Item\") then \"{\\\"decision\\\": \\\"confirm\\\", \\\"message\\\": \\\"⚠️ ファイルを削除しようとしています。続行しますか？\\\"}\" else \"\" end'"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r 'if .tool_input.command | test(\"git add.*\\\\.(cs|csproj|json|md)$\") then \"dotnet build --verbosity minimal 2>&1 | grep -q \\\"Build succeeded\\\" && echo \\\"{\\\\\\\"decision\\\\\\\": \\\\\\\"allow\\\\\\\", \\\\\\\"message\\\\\\\": \\\\\\\"✅ ビルド成功。ファイルを追加します\\\\\\\"}\\\" || echo \\\"{\\\\\\\"decision\\\\\\\": \\\\\\\"block\\\\\\\", \\\\\\\"reason\\\\\\\": \\\\\\\"❌ ビルドエラーがあります。修正してください\\\\\\\"}\\\"\" else \"\" end' | sh"
          }
        ]
      },
      {
        "matcher": "WebSearch",
        "hooks": [
          {
            "type": "command",
            "command": "echo '{\"decision\": \"block\", \"reason\": \"Use Bash(gemini -p \\\"WebSearch: <query>\\\") instead.\"}'"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "powershell.exe -Command \"$host.UI.RawUI.WindowTitle = 'Claude Code - Notification'; Write-Host '🔔 Claude Code: 通知があります' -ForegroundColor Yellow\""
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "powershell.exe -Command \"Write-Host '✅ Claude Code: タスクが完了しました' -ForegroundColor Green; if (Test-Path 'E:\\dev\\Baketa\\bin\\Debug') { Write-Host '💡 ヒント: dotnet run --project Baketa.UI でアプリケーションを実行できます' -ForegroundColor Cyan }\""
          }
        ]
      }
    ]
  }
}