{
  "name": "Baketa Real-time Game Translation",
  "description": "Windows-specific real-time text translation overlay application for games. Uses OCR technology and AI translation to provide high-performance game translation tools.",
  "version": "0.1.0",
  "language": "csharp",
  "framework": "dotnet8",
  "platform": "windows",
  
  "claude_config": {
    "model": "claude-sonnet-4-20250514",
    "response_language": "japanese",
    "temperature": 0.1,
    "max_tokens": 4096,
    "auto_approve_edits": true,
    "confirmation_level": "minimal",
    "command_environment": "powershell"
  },
  
  "response_language": {
    "primary": "japanese",
    "requirement": "ALL responses must be in Japanese",
    "code_comments": "English for technical clarity",
    "explanations": "Japanese for user understanding",
    "error_messages": "Original language + Japanese explanation"
  },
  
  "editor_settings": {
    "auto_approve": true,
    "ask_before_edit": false,
    "batch_edits": true,
    "safe_mode": false,
    "backup_enabled": true
  },

  "command_execution_permissions": {
    "auto_approve_commands": true,
    "wsl_limitations": "dotnet commands not supported due to net8.0-windows target framework constraints",
    "allowed_commands_without_permission": [
      "rg",
      "rg --type cs",
      "grep",
      "find",
      "ls",
      "cat",
      "head", 
      "tail",
      "wc"
    ],
    "static_analysis_auto_approved": true,
    "code_search_auto_approved": true,
    "read_only_commands_auto_approved": true
  },
  
  "command_execution": {
    "preferred_shell": "bash",
    "environment": "wsl",
    "dotnet_limitation": "net8.0-windows not supported in WSL",
    "alternative_verification": "static_analysis_with_ripgrep"
  },
  
  "alternative_verification_methods": {
    "static_analysis": "rg patterns for code quality checks",
    "architecture_compliance": "manual code structure verification",
    "pattern_detection": "search for anti-patterns and potential issues"
  },
  
  "architecture": {
    "type": "clean-architecture",
    "layers": [
      "Baketa.Core - Platform-independent core functionality and abstractions",
      "Baketa.Infrastructure - Infrastructure layer (OCR, translation)",
      "Baketa.Infrastructure.Platform - Windows-specific implementations",
      "Baketa.Application - Business logic and feature integration",
      "Baketa.UI - User interface (Avalonia UI)"
    ]
  },
  
  "key_technologies": [
    "C# 12",
    "Avalonia UI 11.2.7",
    "ReactiveUI",
    "PaddleOCR",
    "OpenCV",
    "OPUS-MT Translation",
    "Google Gemini API",
    "Microsoft.Extensions.DependencyInjection",
    "xUnit Testing",
    "GitHub Actions CI/CD",
    "CodeQL Security Analysis"
  ],
  
  "development_focus": [
    "Windows-specific design",
    "Real-time image processing",
    "OCR optimization",
    "Low resource consumption",
    "Game performance preservation",
    "Multi-language translation support",
    "Root cause solution implementation",
    "GDPR-compliant privacy management",
    "Security-first design",
    "Comprehensive testing (1,300+ test cases)"
  ],
  
  "quality_standards": {
    "code_analysis": "Microsoft Code Analysis + EditorConfig + CodeQL",
    "async_programming": "ConfigureAwait(false) required in library code",
    "null_safety": "Nullable reference types enabled",
    "architecture_compliance": "Clean Architecture principles",
    "test_coverage": "Unit + Integration + UI tests (1,300+ test cases)",
    "solution_approach": "Root cause solutions, not surface-level fixes",
    "security_analysis": "CodeQL static analysis + GitHub Security scanning",
    "ci_cd": "GitHub Actions with Windows Server 2022, sequential test execution"
  },
  
  "communication_guidelines": {
    "primary_language": "日本語 (Japanese)",
    "technical_documentation": "English for international compatibility, Japanese explanations",
    "code_comments": "English preferred for technical clarity",
    "business_logic": "Japanese domain knowledge preserved when needed",
    "error_explanations": "Always provide Japanese explanations",
    "response_format": "All Claude Code responses must be in Japanese"
  },
  
  "development_philosophy": {
    "core_principle": "根本原因解決 (Root Cause Solutions)",
    "approach": "Fundamental solutions over surface-level fixes",
    "long_term_focus": "Sustainable and maintainable code architecture",
    "problem_solving": "Systematic analysis and architectural solutions"
  },

  "implementation_methodology": {
    "thinking_mode": "Always use Think Mode for implementation reasoning",
    "mandatory_pre_implementation_steps": {
      "step_1_root_cause_analysis": {
        "description": "根本原因分析 - Identify true causes, not symptoms",
        "requirements": [
          "問題の本質特定 - Identify the essence of the problem",
          "アーキテクチャ影響確認 - Verify architectural consistency",
          "設計パターン適合性検証 - Validate design pattern compliance",
          "技術的負債評価 - Assess technical debt impact"
        ]
      },
      "step_2_impact_analysis": {
        "description": "影響範囲分析 - Analyze modification impact scope",
        "requirements": [
          "依存関係確認 - Identify dependent files and modules",
          "インターフェース変更影響評価 - Assess API/interface changes",
          "テスト影響範囲特定 - Identify affected tests",
          "ビルド・コンパイル影響予測 - Predict build/compile impact",
          "パフォーマンス影響評価 - Evaluate performance implications"
        ]
      },
      "step_3_implementation_strategy": {
        "description": "実装戦略策定 - Develop implementation strategy",
        "requirements": [
          "段階的実装計画 - Plan incremental implementation",
          "リスク軽減策準備 - Prepare risk mitigation strategies",
          "検証方法事前定義 - Pre-define verification methods"
        ]
      }
    },
    "implementation_template": {
      "format": "## Think Mode Analysis\n\n### 1. Root Cause Analysis\n- 問題の本質: \n- アーキテクチャへの影響: \n- 技術的負債評価: \n\n### 2. Impact Analysis\n- 依存関係: \n- インターフェース変更: \n- テスト影響: \n- ビルド影響: \n\n### 3. Implementation Strategy\n- 実装手順: \n- リスク軽減: \n- 検証方法: "
    }
  },
  
  "workflow_optimization": {
    "auto_approve_session": "Use Shift+Tab for 'Yes, and don't ask again this session'",
    "command_templates": "Use project scripts for consistent execution",
    "error_handling": "Collect errors, analyze root cause, implement fundamental fixes",
    "testing_strategy": "PowerShell scripts with detailed logging",
    "auto_execution_policy": {
      "build_verification": "Always run build checks after code changes without asking",
      "diagnostic_commands": "Auto-approve all diagnostic and read-only commands",
      "compilation_checks": "Automatically verify compilation after modifications"
    },
    "mandatory_pre_implementation": {
      "always_use_think_mode": true,
      "required_analysis_steps": [
        "Root Cause Analysis (根本原因分析)",
        "Impact Analysis (影響範囲分析)",
        "Implementation Strategy (実装戦略策定)"
      ],
      "template_usage": "Apply implementation_methodology.implementation_template for all code changes"
    },
    "mandatory_post_implementation": {
      "always_check_errors": true,
      "wsl_adapted_steps": [
        "Run static analysis: rg for common C# issues",
        "Check architecture compliance: verify layer dependencies",
        "Pattern verification: search for potential anti-patterns",
        "Provide WSL-adapted implementation completion report"
      ],
      "alternative_checks": [
        "rg 'ConfigureAwait\\(true\\)|\\.Result\\b|\\.Wait\\(\\)' --type cs",
        "rg 'TODO|FIXME|HACK' --type cs",
        "rg 'null!' --type cs"
      ],
      "report_format": "✅ WSL環境実装完了チェック結果: 静的解析/パターン検証/アーキテクチャ準拠を明記"
    }
  },
  
  "implemented_features": {
    "privacy_management": {
      "description": "GDPR-compliant privacy consent system",
      "key_classes": ["IPrivacyConsentService", "PrivacyConsentService"],
      "features": ["Data collection type management", "Consent expiration (2 years)", "Consent revocation"]
    },
    "feedback_system": {
      "description": "GitHub Issues API integration for user feedback",
      "key_classes": ["IFeedbackService", "FeedbackService"],
      "features": ["Bug reports", "Feature requests", "General feedback", "System info collection"]
    },
    "update_system": {
      "description": "GitHub Releases API for secure update checking",
      "key_classes": ["IUpdateCheckService", "UpdateCheckService", "VersionComparisonService"],
      "features": ["Semver comparison", "Automated update checks", "Offline support"]
    },
    "security_features": {
      "description": "Security-first design with comprehensive protection",
      "implementations": ["CodeQL static analysis", "Exception handling safety", "Data protection"],
      "standards": ["OutOfMemoryException protection", "JSON parsing safety", "HTTP timeout handling"]
    },
    "testing_infrastructure": {
      "description": "Comprehensive test suite with 1,300+ test cases",
      "coverage": "Core 85%+, Infrastructure 80%+, UI 70%+",
      "types": ["Unit tests", "Integration tests", "Performance tests", "UI tests"]
    }
  }
}